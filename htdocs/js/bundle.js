/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.l = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };

/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};

/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};

/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 2);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/* unknown exports provided */
/* all exports used */
/*!****************************************!*\
  !*** ./~/inferno/dist/inferno.node.js ***!
  \****************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("\n/*!\n * Inferno v1.3.0-rc.10\n * (c) 2017 Dominic Gannaway'\n * Released under the MIT License.\n */\n\n(function (global, factory) {\n\t true ? factory(exports) :\n\ttypeof define === 'function' && define.amd ? define(['exports'], factory) :\n\t(factory((global.Inferno = global.Inferno || {})));\n}(this, (function (exports) { 'use strict';\n\nvar NO_OP = '$NO_OP';\r\nvar ERROR_MSG = 'a runtime error occured! Use Inferno in development environment to find the error.';\r\nvar isBrowser = typeof window !== 'undefined' && window.document;\r\n\r\n// this is MUCH faster than .constructor === Array and instanceof Array\r\n// in Node 7 and the later versions of V8, slower in older versions though\r\nvar isArray = Array.isArray;\r\nfunction isStatefulComponent(o) {\r\n    return !isUndefined(o.prototype) && !isUndefined(o.prototype.render);\r\n}\r\nfunction isStringOrNumber(obj) {\r\n    var type = typeof obj;\r\n    return type === 'string' || type === 'number';\r\n}\r\nfunction isNullOrUndef(obj) {\r\n    return isUndefined(obj) || isNull(obj);\r\n}\r\nfunction isInvalid(obj) {\r\n    return isNull(obj) || obj === false || isTrue(obj) || isUndefined(obj);\r\n}\r\nfunction isFunction(obj) {\r\n    return typeof obj === 'function';\r\n}\r\nfunction isAttrAnEvent(attr) {\r\n    return attr[0] === 'o' && attr[1] === 'n' && attr.length > 3;\r\n}\r\nfunction isString(obj) {\r\n    return typeof obj === 'string';\r\n}\r\nfunction isNumber(obj) {\r\n    return typeof obj === 'number';\r\n}\r\nfunction isNull(obj) {\r\n    return obj === null;\r\n}\r\nfunction isTrue(obj) {\r\n    return obj === true;\r\n}\r\nfunction isUndefined(obj) {\r\n    return obj === undefined;\r\n}\r\nfunction isObject(o) {\r\n    return typeof o === 'object';\r\n}\r\nfunction throwError(message) {\r\n    if (!message) {\r\n        message = ERROR_MSG;\r\n    }\r\n    throw new Error((\"Inferno Error: \" + message));\r\n}\r\nfunction warning(message) {\r\n    console.warn(message);\r\n}\r\nfunction assign(target) {\n    var arguments$1 = arguments;\n\r\n    for (var i = 1, argumentsLength = arguments.length; i < argumentsLength; i++) {\r\n        var obj = arguments$1[i];\r\n        if (!isNullOrUndef(obj)) {\r\n            var keys = Object.keys(obj);\r\n            for (var j = 0, keysLength = keys.length; j < keysLength; j++) {\r\n                var key = keys[j];\r\n                target[key] = obj[key];\r\n            }\r\n        }\r\n    }\r\n    return target;\r\n}\r\nfunction Lifecycle() {\r\n    this.listeners = [];\r\n}\r\nLifecycle.prototype.addListener = function addListener(callback) {\r\n    this.listeners.push(callback);\r\n};\r\nLifecycle.prototype.trigger = function trigger() {\r\n    var listeners = this.listeners;\r\n    for (var i = 0, len = listeners.length; i < len; i++) {\r\n        listeners[i]();\r\n    }\r\n};\n\nfunction applyKey(key, vNode) {\r\n    vNode.key = key;\r\n    return vNode;\r\n}\r\nfunction applyKeyIfMissing(key, vNode) {\r\n    if (isNumber(key)) {\r\n        key = \".\" + key;\r\n    }\r\n    if (isNull(vNode.key) || vNode.key[0] === '.') {\r\n        return applyKey(key, vNode);\r\n    }\r\n    return vNode;\r\n}\r\nfunction applyKeyPrefix(key, vNode) {\r\n    vNode.key = key + vNode.key;\r\n    return vNode;\r\n}\r\nfunction _normalizeVNodes(nodes, result, index, currentKey) {\r\n    for (var len = nodes.length; index < len; index++) {\r\n        var n = nodes[index];\r\n        var key = currentKey + \".\" + index;\r\n        if (!isInvalid(n)) {\r\n            if (isArray(n)) {\r\n                _normalizeVNodes(n, result, 0, key);\r\n            }\r\n            else {\r\n                if (isStringOrNumber(n)) {\r\n                    n = createTextVNode(n, null);\r\n                }\r\n                else if (isVNode(n) && n.dom || (n.key && n.key[0] === '.')) {\r\n                    n = cloneVNode(n);\r\n                }\r\n                if (isNull(n.key) || n.key[0] === '.') {\r\n                    n = applyKey(key, n);\r\n                }\r\n                else {\r\n                    n = applyKeyPrefix(currentKey, n);\r\n                }\r\n                result.push(n);\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction normalizeVNodes(nodes) {\r\n    var newNodes;\r\n    // we assign $ which basically means we've flagged this array for future note\r\n    // if it comes back again, we need to clone it, as people are using it\r\n    // in an immutable way\r\n    // tslint:disable\r\n    if (nodes['$']) {\r\n        nodes = nodes.slice();\r\n    }\r\n    else {\r\n        nodes['$'] = true;\r\n    }\r\n    // tslint:enable\r\n    for (var i = 0, len = nodes.length; i < len; i++) {\r\n        var n = nodes[i];\r\n        if (isInvalid(n) || isArray(n)) {\r\n            var result = (newNodes || nodes).slice(0, i);\r\n            _normalizeVNodes(nodes, result, i, \"\");\r\n            return result;\r\n        }\r\n        else if (isStringOrNumber(n)) {\r\n            if (!newNodes) {\r\n                newNodes = nodes.slice(0, i);\r\n            }\r\n            newNodes.push(applyKeyIfMissing(i, createTextVNode(n, null)));\r\n        }\r\n        else if ((isVNode(n) && n.dom) || (isNull(n.key) && !(n.flags & 64 /* HasNonKeyedChildren */))) {\r\n            if (!newNodes) {\r\n                newNodes = nodes.slice(0, i);\r\n            }\r\n            newNodes.push(applyKeyIfMissing(i, cloneVNode(n)));\r\n        }\r\n        else if (newNodes) {\r\n            newNodes.push(applyKeyIfMissing(i, cloneVNode(n)));\r\n        }\r\n    }\r\n    return newNodes || nodes;\r\n}\r\nfunction normalizeChildren(children) {\r\n    if (isArray(children)) {\r\n        return normalizeVNodes(children);\r\n    }\r\n    else if (isVNode(children) && children.dom) {\r\n        return cloneVNode(children);\r\n    }\r\n    return children;\r\n}\r\nfunction normalizeProps(vNode, props, children) {\r\n    if (!(vNode.flags & 28 /* Component */) && isNullOrUndef(children) && !isNullOrUndef(props.children)) {\r\n        vNode.children = props.children;\r\n    }\r\n    if (props.ref) {\r\n        vNode.ref = props.ref;\r\n        delete props.ref;\r\n    }\r\n    if (props.events) {\r\n        vNode.events = props.events;\r\n    }\r\n    if (!isNullOrUndef(props.key)) {\r\n        vNode.key = props.key;\r\n        delete props.key;\r\n    }\r\n}\r\nfunction normalizeElement(type, vNode) {\r\n    if (type === 'svg') {\r\n        vNode.flags = 128 /* SvgElement */;\r\n    }\r\n    else if (type === 'input') {\r\n        vNode.flags = 512 /* InputElement */;\r\n    }\r\n    else if (type === 'select') {\r\n        vNode.flags = 2048 /* SelectElement */;\r\n    }\r\n    else if (type === 'textarea') {\r\n        vNode.flags = 1024 /* TextareaElement */;\r\n    }\r\n    else if (type === 'media') {\r\n        vNode.flags = 256 /* MediaElement */;\r\n    }\r\n    else {\r\n        vNode.flags = 2 /* HtmlElement */;\r\n    }\r\n}\r\nfunction normalize(vNode) {\r\n    var props = vNode.props;\r\n    var type = vNode.type;\r\n    var children = vNode.children;\r\n    // convert a wrongly created type back to element\r\n    // Primitive node doesn't have defaultProps, only Component\r\n    if (vNode.flags & 28 /* Component */) {\r\n        // set default props\r\n        var defaultProps = type.defaultProps;\r\n        if (!isNullOrUndef(defaultProps)) {\r\n            if (!props) {\r\n                props = vNode.props = defaultProps; // Create new object if only defaultProps given\r\n            }\r\n            else {\r\n                for (var prop in defaultProps) {\r\n                    if (isUndefined(props[prop])) {\r\n                        props[prop] = defaultProps[prop];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (isString(type)) {\r\n            normalizeElement(type, vNode);\r\n            if (props && props.children) {\r\n                vNode.children = props.children;\r\n                children = props.children;\r\n            }\r\n        }\r\n    }\r\n    if (props) {\r\n        normalizeProps(vNode, props, children);\r\n    }\r\n    if (!isInvalid(children)) {\r\n        vNode.children = normalizeChildren(children);\r\n    }\r\n    if (props && !isInvalid(props.children)) {\r\n        props.children = normalizeChildren(props.children);\r\n    }\r\n    if (true) {\r\n        // This code will be stripped out from production CODE\r\n        // It will help users to track errors in their applications.\r\n        var verifyKeys = function (vNodes) {\r\n            var keyValues = vNodes.map(function (vnode) { return vnode.key; });\r\n            keyValues.some(function (item, idx) {\r\n                var hasDuplicate = keyValues.indexOf(item) !== idx;\r\n                if (hasDuplicate) {\r\n                    warning('Inferno normalisation(...): Encountered two children with same key, all keys must be unique within its siblings. Duplicated key is:' + item);\r\n                }\r\n                return hasDuplicate;\r\n            });\r\n        };\r\n        if (vNode.children && Array.isArray(vNode.children)) {\r\n            verifyKeys(vNode.children);\r\n        }\r\n    }\r\n}\n\nvar options = {\r\n    recyclingEnabled: false,\r\n    findDOMNodeEnabled: false,\r\n    roots: null,\r\n    createVNode: null,\r\n    beforeRender: null,\r\n    afterRender: null,\r\n    afterMount: null,\r\n    afterUpdate: null,\r\n    beforeUnmount: null\r\n};\n\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\r\nvar xmlNS = 'http://www.w3.org/XML/1998/namespace';\r\nvar svgNS = 'http://www.w3.org/2000/svg';\r\nvar strictProps = Object.create(null);\r\nstrictProps.volume = true;\r\nstrictProps.defaultChecked = true;\r\nvar booleanProps = Object.create(null);\r\nbooleanProps.muted = 1;\r\nbooleanProps.scoped = 1;\r\nbooleanProps.loop = 1;\r\nbooleanProps.open = 1;\r\nbooleanProps.checked = 1;\r\nbooleanProps.default = 1;\r\nbooleanProps.capture = 1;\r\nbooleanProps.disabled = 1;\r\nbooleanProps.readOnly = 1;\r\nbooleanProps.required = 1;\r\nbooleanProps.autoplay = 1;\r\nbooleanProps.controls = 1;\r\nbooleanProps.seamless = 1;\r\nbooleanProps.reversed = 1;\r\nbooleanProps.allowfullscreen = 1;\r\nbooleanProps.novalidate = 1;\r\nbooleanProps.hidden = 1;\r\nvar namespaces = Object.create(null);\r\nnamespaces['xlink:href'] = xlinkNS;\r\nnamespaces['xlink:arcrole'] = xlinkNS;\r\nnamespaces['xlink:actuate'] = xlinkNS;\r\nnamespaces['xlink:role'] = xlinkNS;\r\nnamespaces['xlink:titlef'] = xlinkNS;\r\nnamespaces['xlink:type'] = xlinkNS;\r\nnamespaces['xml:base'] = xmlNS;\r\nnamespaces['xml:lang'] = xmlNS;\r\nnamespaces['xml:space'] = xmlNS;\r\nvar isUnitlessNumber = Object.create(null);\r\nisUnitlessNumber.animationIterationCount = 1;\r\nisUnitlessNumber.borderImageOutset = 1;\r\nisUnitlessNumber.borderImageSlice = 1;\r\nisUnitlessNumber.borderImageWidth = 1;\r\nisUnitlessNumber.boxFlex = 1;\r\nisUnitlessNumber.boxFlexGroup = 1;\r\nisUnitlessNumber.boxOrdinalGroup = 1;\r\nisUnitlessNumber.columnCount = 1;\r\nisUnitlessNumber.flex = 1;\r\nisUnitlessNumber.flexGrow = 1;\r\nisUnitlessNumber.flexPositive = 1;\r\nisUnitlessNumber.flexShrink = 1;\r\nisUnitlessNumber.flexNegative = 1;\r\nisUnitlessNumber.flexOrder = 1;\r\nisUnitlessNumber.gridRow = 1;\r\nisUnitlessNumber.gridColumn = 1;\r\nisUnitlessNumber.fontWeight = 1;\r\nisUnitlessNumber.lineClamp = 1;\r\nisUnitlessNumber.lineHeight = 1;\r\nisUnitlessNumber.opacity = 1;\r\nisUnitlessNumber.order = 1;\r\nisUnitlessNumber.orphans = 1;\r\nisUnitlessNumber.tabSize = 1;\r\nisUnitlessNumber.widows = 1;\r\nisUnitlessNumber.zIndex = 1;\r\nisUnitlessNumber.zoom = 1;\r\nisUnitlessNumber.fillOpacity = 1;\r\nisUnitlessNumber.floodOpacity = 1;\r\nisUnitlessNumber.stopOpacity = 1;\r\nisUnitlessNumber.strokeDasharray = 1;\r\nisUnitlessNumber.strokeDashoffset = 1;\r\nisUnitlessNumber.strokeMiterlimit = 1;\r\nisUnitlessNumber.strokeOpacity = 1;\r\nisUnitlessNumber.strokeWidth = 1;\r\nvar skipProps = Object.create(null);\r\nskipProps.children = 1;\r\nskipProps.childrenType = 1;\r\nskipProps.defaultValue = 1;\r\nskipProps.ref = 1;\r\nskipProps.key = 1;\r\nskipProps.selected = 1;\r\nskipProps.checked = 1;\r\nskipProps.multiple = 1;\r\nvar delegatedProps = Object.create(null);\r\ndelegatedProps.onClick = 1;\r\ndelegatedProps.onMouseDown = 1;\r\ndelegatedProps.onMouseUp = 1;\r\ndelegatedProps.onMouseMove = 1;\r\ndelegatedProps.onSubmit = 1;\r\ndelegatedProps.onDblClick = 1;\r\ndelegatedProps.onKeyDown = 1;\r\ndelegatedProps.onKeyUp = 1;\r\ndelegatedProps.onKeyPress = 1;\n\nvar isiOS = isBrowser && !!navigator.platform && /iPad|iPhone|iPod/.test(navigator.platform);\r\nvar delegatedEvents = new Map();\r\nfunction handleEvent(name, lastEvent, nextEvent, dom) {\r\n    var delegatedRoots = delegatedEvents.get(name);\r\n    if (nextEvent) {\r\n        if (!delegatedRoots) {\r\n            delegatedRoots = { items: new Map(), count: 0, docEvent: null };\r\n            delegatedRoots.docEvent = attachEventToDocument(name, delegatedRoots);\r\n            delegatedEvents.set(name, delegatedRoots);\r\n        }\r\n        if (!lastEvent) {\r\n            delegatedRoots.count++;\r\n            if (isiOS && name === 'onClick') {\r\n                trapClickOnNonInteractiveElement(dom);\r\n            }\r\n        }\r\n        delegatedRoots.items.set(dom, nextEvent);\r\n    }\r\n    else if (delegatedRoots) {\r\n        if (delegatedRoots.items.has(dom)) {\r\n            delegatedRoots.count--;\r\n            delegatedRoots.items.delete(dom);\r\n            if (delegatedRoots.count === 0) {\r\n                document.removeEventListener(normalizeEventName(name), delegatedRoots.docEvent);\r\n                delegatedEvents.delete(name);\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction dispatchEvent(event, dom, items, count, eventData) {\r\n    var eventsToTrigger = items.get(dom);\r\n    if (eventsToTrigger) {\r\n        count--;\r\n        // linkEvent object\r\n        eventData.dom = dom;\r\n        if (eventsToTrigger.event) {\r\n            eventsToTrigger.event(eventsToTrigger.data, event);\r\n        }\r\n        else {\r\n            eventsToTrigger(event);\r\n        }\r\n        if (eventData.stopPropagation) {\r\n            return;\r\n        }\r\n    }\r\n    if (count > 0) {\r\n        var parentDom = dom.parentNode;\r\n        // Html Nodes can be nested fe: span inside button in that scenario browser does not handle disabled attribute on parent,\r\n        // because the event listener is on document.body\r\n        if (parentDom && parentDom.disabled !== true || parentDom === document.body) {\r\n            dispatchEvent(event, parentDom, items, count, eventData);\r\n        }\r\n    }\r\n}\r\nfunction normalizeEventName(name) {\r\n    return name.substr(2).toLowerCase();\r\n}\r\nfunction attachEventToDocument(name, delegatedRoots) {\r\n    var docEvent = function (event) {\r\n        var eventData = {\r\n            stopPropagation: false,\r\n            dom: document\r\n        };\r\n        // we have to do this as some browsers recycle the same Event between calls\r\n        // so we need to make the property configurable\r\n        Object.defineProperty(event, 'currentTarget', {\r\n            configurable: true,\r\n            get: function get() {\r\n                return eventData.dom;\r\n            }\r\n        });\r\n        event.stopPropagation = function () {\r\n            eventData.stopPropagation = true;\r\n        };\r\n        var count = delegatedRoots.count;\r\n        if (count > 0) {\r\n            dispatchEvent(event, event.target, delegatedRoots.items, count, eventData);\r\n        }\r\n    };\r\n    document.addEventListener(normalizeEventName(name), docEvent);\r\n    return docEvent;\r\n}\r\nfunction emptyFn() { }\r\nfunction trapClickOnNonInteractiveElement(dom) {\r\n    // Mobile Safari does not fire properly bubble click events on\r\n    // non-interactive elements, which means delegated click listeners do not\r\n    // fire. The workaround for this bug involves attaching an empty click\r\n    // listener on the target node.\r\n    // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html\r\n    // Just set it using the onclick property so that we don't have to manage any\r\n    // bookkeeping for it. Not sure if we need to clear it when the listener is\r\n    // removed.\r\n    // TODO: Only do this for the relevant Safaris maybe?\r\n    dom.onclick = emptyFn;\r\n}\n\nfunction isCheckedType(type) {\r\n    return type === 'checkbox' || type === 'radio';\r\n}\r\nfunction isControlled(props) {\r\n    var usesChecked = isCheckedType(props.type);\r\n    return usesChecked ? !isNullOrUndef(props.checked) : !isNullOrUndef(props.value);\r\n}\r\nfunction onTextInputChange(e) {\r\n    var vNode = this.vNode;\r\n    var events = vNode.events || EMPTY_OBJ;\r\n    var dom = vNode.dom;\r\n    if (events.onInput) {\r\n        var event = events.onInput;\r\n        if (event.event) {\r\n            event.event(event.data, e);\r\n        }\r\n        else {\r\n            event(e);\r\n        }\r\n    }\r\n    else if (events.oninput) {\r\n        events.oninput(e);\r\n    }\r\n    // the user may have updated the vNode from the above onInput events\r\n    // so we need to get it from the context of `this` again\r\n    applyValue(this.vNode, dom);\r\n}\r\nfunction wrappedOnChange(e) {\r\n    var vNode = this.vNode;\r\n    var events = vNode.events || EMPTY_OBJ;\r\n    var event = events.onChange;\r\n    if (event.event) {\r\n        event.event(event.data, e);\r\n    }\r\n    else {\r\n        event(e);\r\n    }\r\n}\r\nfunction onCheckboxChange(e) {\r\n    var vNode = this.vNode;\r\n    var events = vNode.events || EMPTY_OBJ;\r\n    var dom = vNode.dom;\r\n    if (events.onClick) {\r\n        var event = events.onClick;\r\n        if (event.event) {\r\n            event.event(event.data, e);\r\n        }\r\n        else {\r\n            event(e);\r\n        }\r\n    }\r\n    else if (events.onclick) {\r\n        events.onclick(e);\r\n    }\r\n    // the user may have updated the vNode from the above onClick events\r\n    // so we need to get it from the context of `this` again\r\n    applyValue(this.vNode, dom);\r\n}\r\nfunction handleAssociatedRadioInputs(name) {\r\n    var inputs = document.querySelectorAll((\"input[type=\\\"radio\\\"][name=\\\"\" + name + \"\\\"]\"));\r\n    [].forEach.call(inputs, function (dom) {\r\n        var inputWrapper = wrappers.get(dom);\r\n        if (inputWrapper) {\r\n            var props = inputWrapper.vNode.props;\r\n            if (props) {\r\n                dom.checked = inputWrapper.vNode.props.checked;\r\n            }\r\n        }\r\n    });\r\n}\r\nfunction processInput(vNode, dom) {\r\n    var props = vNode.props || EMPTY_OBJ;\r\n    applyValue(vNode, dom);\r\n    if (isControlled(props)) {\r\n        var inputWrapper = wrappers.get(dom);\r\n        if (!inputWrapper) {\r\n            inputWrapper = {\r\n                vNode: vNode\r\n            };\r\n            if (isCheckedType(props.type)) {\r\n                dom.onclick = onCheckboxChange.bind(inputWrapper);\r\n                dom.onclick.wrapped = true;\r\n            }\r\n            else {\r\n                dom.oninput = onTextInputChange.bind(inputWrapper);\r\n                dom.oninput.wrapped = true;\r\n            }\r\n            if (props.onChange) {\r\n                dom.onchange = wrappedOnChange.bind(inputWrapper);\r\n                dom.onchange.wrapped = true;\r\n            }\r\n            wrappers.set(dom, inputWrapper);\r\n        }\r\n        inputWrapper.vNode = vNode;\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction applyValue(vNode, dom) {\r\n    var props = vNode.props || EMPTY_OBJ;\r\n    var type = props.type;\r\n    var value = props.value;\r\n    var checked = props.checked;\r\n    var multiple = props.multiple;\r\n    var defaultValue = props.defaultValue;\r\n    var hasValue = !isNullOrUndef(value);\r\n    if (type && type !== dom.type) {\r\n        dom.type = type;\r\n    }\r\n    if (multiple && multiple !== dom.multiple) {\r\n        dom.multiple = multiple;\r\n    }\r\n    if (!isNullOrUndef(defaultValue) && !hasValue) {\r\n        dom.defaultValue = defaultValue + '';\r\n    }\r\n    if (isCheckedType(type)) {\r\n        if (hasValue) {\r\n            dom.value = value;\r\n        }\r\n        if (!isNullOrUndef(checked)) {\r\n            dom.checked = checked;\r\n        }\r\n        if (type === 'radio' && props.name) {\r\n            handleAssociatedRadioInputs(props.name);\r\n        }\r\n    }\r\n    else {\r\n        if (hasValue && dom.value !== value) {\r\n            dom.value = value;\r\n        }\r\n        else if (!isNullOrUndef(checked)) {\r\n            dom.checked = checked;\r\n        }\r\n    }\r\n}\n\nfunction isControlled$1(props) {\r\n    return !isNullOrUndef(props.value);\r\n}\r\nfunction updateChildOptionGroup(vNode, value) {\r\n    var type = vNode.type;\r\n    if (type === 'optgroup') {\r\n        var children = vNode.children;\r\n        if (isArray(children)) {\r\n            for (var i = 0, len = children.length; i < len; i++) {\r\n                updateChildOption(children[i], value);\r\n            }\r\n        }\r\n        else if (isVNode(children)) {\r\n            updateChildOption(children, value);\r\n        }\r\n    }\r\n    else {\r\n        updateChildOption(vNode, value);\r\n    }\r\n}\r\nfunction updateChildOption(vNode, value) {\r\n    var props = vNode.props || EMPTY_OBJ;\r\n    var dom = vNode.dom;\r\n    // we do this as multiple may have changed\r\n    dom.value = props.value;\r\n    if ((isArray(value) && value.indexOf(props.value) !== -1) || props.value === value) {\r\n        dom.selected = true;\r\n    }\r\n    else if (!isNullOrUndef(value) || !isNullOrUndef(props.selected)) {\r\n        dom.selected = props.selected || false;\r\n    }\r\n}\r\nfunction onSelectChange(e) {\r\n    var vNode = this.vNode;\r\n    var events = vNode.events || EMPTY_OBJ;\r\n    var dom = vNode.dom;\r\n    if (events.onChange) {\r\n        var event = events.onChange;\r\n        if (event.event) {\r\n            event.event(event.data, e);\r\n        }\r\n        else {\r\n            event(e);\r\n        }\r\n    }\r\n    else if (events.onchange) {\r\n        events.onchange(e);\r\n    }\r\n    // the user may have updated the vNode from the above onChange events\r\n    // so we need to get it from the context of `this` again\r\n    applyValue$1(this.vNode, dom, false);\r\n}\r\nfunction processSelect(vNode, dom, mounting) {\r\n    var props = vNode.props || EMPTY_OBJ;\r\n    applyValue$1(vNode, dom, mounting);\r\n    if (isControlled$1(props)) {\r\n        var selectWrapper = wrappers.get(dom);\r\n        if (!selectWrapper) {\r\n            selectWrapper = {\r\n                vNode: vNode\r\n            };\r\n            dom.onchange = onSelectChange.bind(selectWrapper);\r\n            dom.onchange.wrapped = true;\r\n            wrappers.set(dom, selectWrapper);\r\n        }\r\n        selectWrapper.vNode = vNode;\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction applyValue$1(vNode, dom, mounting) {\r\n    var props = vNode.props || EMPTY_OBJ;\r\n    if (props.multiple !== dom.multiple) {\r\n        dom.multiple = props.multiple;\r\n    }\r\n    var children = vNode.children;\r\n    if (!isInvalid(children)) {\r\n        var value = props.value;\r\n        if (mounting && isNullOrUndef(value)) {\r\n            value = props.defaultValue;\r\n        }\r\n        if (isArray(children)) {\r\n            for (var i = 0, len = children.length; i < len; i++) {\r\n                updateChildOptionGroup(children[i], value);\r\n            }\r\n        }\r\n        else if (isVNode(children)) {\r\n            updateChildOptionGroup(children, value);\r\n        }\r\n    }\r\n}\n\nfunction isControlled$2(props) {\r\n    return !isNullOrUndef(props.value);\r\n}\r\nfunction wrappedOnChange$1(e) {\r\n    var vNode = this.vNode;\r\n    var events = vNode.events || EMPTY_OBJ;\r\n    var event = events.onChange;\r\n    if (event.event) {\r\n        event.event(event.data, e);\r\n    }\r\n    else {\r\n        event(e);\r\n    }\r\n}\r\nfunction onTextareaInputChange(e) {\r\n    var vNode = this.vNode;\r\n    var events = vNode.events || EMPTY_OBJ;\r\n    var dom = vNode.dom;\r\n    if (events.onInput) {\r\n        var event = events.onInput;\r\n        if (event.event) {\r\n            event.event(event.data, e);\r\n        }\r\n        else {\r\n            event(e);\r\n        }\r\n    }\r\n    else if (events.oninput) {\r\n        events.oninput(e);\r\n    }\r\n    // the user may have updated the vNode from the above onInput events\r\n    // so we need to get it from the context of `this` again\r\n    applyValue$2(this.vNode, dom, false);\r\n}\r\nfunction processTextarea(vNode, dom, mounting) {\r\n    var props = vNode.props || EMPTY_OBJ;\r\n    applyValue$2(vNode, dom, mounting);\r\n    var textareaWrapper = wrappers.get(dom);\r\n    if (isControlled$2(props)) {\r\n        if (!textareaWrapper) {\r\n            textareaWrapper = {\r\n                vNode: vNode\r\n            };\r\n            dom.oninput = onTextareaInputChange.bind(textareaWrapper);\r\n            dom.oninput.wrapped = true;\r\n            if (props.onChange) {\r\n                dom.onchange = wrappedOnChange$1.bind(textareaWrapper);\r\n                dom.onchange.wrapped = true;\r\n            }\r\n            wrappers.set(dom, textareaWrapper);\r\n        }\r\n        textareaWrapper.vNode = vNode;\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction applyValue$2(vNode, dom, mounting) {\r\n    var props = vNode.props || EMPTY_OBJ;\r\n    var value = props.value;\r\n    var domValue = dom.value;\r\n    if (isNullOrUndef(value)) {\r\n        if (mounting) {\r\n            var defaultValue = props.defaultValue;\r\n            if (!isNullOrUndef(defaultValue)) {\r\n                if (defaultValue !== domValue) {\r\n                    dom.value = defaultValue;\r\n                }\r\n            }\r\n            else if (domValue !== '') {\r\n                dom.value = '';\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        /* There is value so keep it controlled */\r\n        if (domValue !== value) {\r\n            dom.value = value;\r\n        }\r\n    }\r\n}\n\nvar wrappers = new Map();\r\nfunction processElement(flags, vNode, dom, mounting) {\r\n    if (flags & 512 /* InputElement */) {\r\n        return processInput(vNode, dom);\r\n    }\r\n    if (flags & 2048 /* SelectElement */) {\r\n        return processSelect(vNode, dom, mounting);\r\n    }\r\n    if (flags & 1024 /* TextareaElement */) {\r\n        return processTextarea(vNode, dom, mounting);\r\n    }\r\n    return false;\r\n}\n\nfunction normalizeChildNodes(parentDom) {\r\n    var dom = parentDom.firstChild;\r\n    while (dom) {\r\n        if (dom.nodeType === 8) {\r\n            if (dom.data === '!') {\r\n                var placeholder = document.createTextNode('');\r\n                parentDom.replaceChild(placeholder, dom);\r\n                dom = dom.nextSibling;\r\n            }\r\n            else {\r\n                var lastDom = dom.previousSibling;\r\n                parentDom.removeChild(dom);\r\n                dom = lastDom || parentDom.firstChild;\r\n            }\r\n        }\r\n        else {\r\n            dom = dom.nextSibling;\r\n        }\r\n    }\r\n}\r\nfunction hydrateComponent(vNode, dom, lifecycle, context, isSVG, isClass) {\r\n    var type = vNode.type;\r\n    var ref = vNode.ref;\r\n    vNode.dom = dom;\r\n    var props = vNode.props || EMPTY_OBJ;\r\n    if (isClass) {\r\n        var _isSVG = dom.namespaceURI === svgNS;\r\n        var instance = createClassComponentInstance(vNode, type, props, context, _isSVG);\r\n        var input = instance._lastInput;\r\n        instance._vComponent = vNode;\r\n        instance._vNode = vNode;\r\n        hydrate(input, dom, lifecycle, instance._childContext, _isSVG);\r\n        mountClassComponentCallbacks(vNode, ref, instance, lifecycle);\r\n        options.findDOMNodeEnabled && componentToDOMNodeMap.set(instance, dom);\r\n        vNode.children = instance;\r\n    }\r\n    else {\r\n        var input$1 = createFunctionalComponentInput(vNode, type, props, context);\r\n        hydrate(input$1, dom, lifecycle, context, isSVG);\r\n        vNode.children = input$1;\r\n        vNode.dom = input$1.dom;\r\n        mountFunctionalComponentCallbacks(ref, dom, lifecycle);\r\n    }\r\n    return dom;\r\n}\r\nfunction hydrateElement(vNode, dom, lifecycle, context, isSVG) {\r\n    var children = vNode.children;\r\n    var props = vNode.props;\r\n    var events = vNode.events;\r\n    var flags = vNode.flags;\r\n    var ref = vNode.ref;\r\n    if (isSVG || (flags & 128 /* SvgElement */)) {\r\n        isSVG = true;\r\n    }\r\n    if (dom.nodeType !== 1 || dom.tagName.toLowerCase() !== vNode.type) {\r\n        if (true) {\r\n            warning('Inferno hydration: Server-side markup doesn\\'t match client-side markup or Initial render target is not empty');\r\n        }\r\n        var newDom = mountElement(vNode, null, lifecycle, context, isSVG);\r\n        vNode.dom = newDom;\r\n        replaceChild(dom.parentNode, newDom, dom);\r\n        return newDom;\r\n    }\r\n    vNode.dom = dom;\r\n    if (children) {\r\n        hydrateChildren(children, dom, lifecycle, context, isSVG);\r\n    }\r\n    var hasControlledValue = false;\r\n    if (!(flags & 2 /* HtmlElement */)) {\r\n        hasControlledValue = processElement(flags, vNode, dom, false);\r\n    }\r\n    if (props) {\r\n        for (var prop in props) {\r\n            patchProp(prop, null, props[prop], dom, isSVG, hasControlledValue);\r\n        }\r\n    }\r\n    if (events) {\r\n        for (var name in events) {\r\n            patchEvent(name, null, events[name], dom);\r\n        }\r\n    }\r\n    if (ref) {\r\n        mountRef(dom, ref, lifecycle);\r\n    }\r\n    return dom;\r\n}\r\nfunction hydrateChildren(children, parentDom, lifecycle, context, isSVG) {\r\n    normalizeChildNodes(parentDom);\r\n    var dom = parentDom.firstChild;\r\n    if (isArray(children)) {\r\n        for (var i = 0, len = children.length; i < len; i++) {\r\n            var child = children[i];\r\n            if (!isNull(child) && isObject(child)) {\r\n                if (dom) {\r\n                    dom = hydrate(child, dom, lifecycle, context, isSVG);\r\n                    dom = dom.nextSibling;\r\n                }\r\n                else {\r\n                    mount(child, parentDom, lifecycle, context, isSVG);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    else if (isStringOrNumber(children)) {\r\n        if (dom && dom.nodeType === 3) {\r\n            if (dom.nodeValue !== children) {\r\n                dom.nodeValue = children;\r\n            }\r\n        }\r\n        else if (children) {\r\n            parentDom.textContent = children;\r\n        }\r\n        dom = dom.nextSibling;\r\n    }\r\n    else if (isObject(children)) {\r\n        hydrate(children, dom, lifecycle, context, isSVG);\r\n        dom = dom.nextSibling;\r\n    }\r\n    // clear any other DOM nodes, there should be only a single entry for the root\r\n    while (dom) {\r\n        var nextSibling = dom.nextSibling;\r\n        parentDom.removeChild(dom);\r\n        dom = nextSibling;\r\n    }\r\n}\r\nfunction hydrateText(vNode, dom) {\r\n    if (dom.nodeType !== 3) {\r\n        var newDom = mountText(vNode, null);\r\n        vNode.dom = newDom;\r\n        replaceChild(dom.parentNode, newDom, dom);\r\n        return newDom;\r\n    }\r\n    var text = vNode.children;\r\n    if (dom.nodeValue !== text) {\r\n        dom.nodeValue = text;\r\n    }\r\n    vNode.dom = dom;\r\n    return dom;\r\n}\r\nfunction hydrateVoid(vNode, dom) {\r\n    vNode.dom = dom;\r\n    return dom;\r\n}\r\nfunction hydrate(vNode, dom, lifecycle, context, isSVG) {\r\n    var flags = vNode.flags;\r\n    if (flags & 28 /* Component */) {\r\n        return hydrateComponent(vNode, dom, lifecycle, context, isSVG, flags & 4 /* ComponentClass */);\r\n    }\r\n    else if (flags & 3970 /* Element */) {\r\n        return hydrateElement(vNode, dom, lifecycle, context, isSVG);\r\n    }\r\n    else if (flags & 1 /* Text */) {\r\n        return hydrateText(vNode, dom);\r\n    }\r\n    else if (flags & 4096 /* Void */) {\r\n        return hydrateVoid(vNode, dom);\r\n    }\r\n    else {\r\n        if (true) {\r\n            throwError((\"hydrate() expects a valid VNode, instead it received an object with the type \\\"\" + (typeof vNode) + \"\\\".\"));\r\n        }\r\n        throwError();\r\n    }\r\n}\r\nfunction hydrateRoot(input, parentDom, lifecycle) {\r\n    var dom = parentDom && parentDom.firstChild;\r\n    if (dom) {\r\n        hydrate(input, dom, lifecycle, EMPTY_OBJ, false);\r\n        dom = parentDom.firstChild;\r\n        // clear any other DOM nodes, there should be only a single entry for the root\r\n        while (dom = dom.nextSibling) {\r\n            parentDom.removeChild(dom);\r\n        }\r\n        return true;\r\n    }\r\n    return false;\r\n}\n\nvar componentPools = new Map();\r\nvar elementPools = new Map();\r\nfunction recycleElement(vNode, lifecycle, context, isSVG) {\r\n    var tag = vNode.type;\r\n    var pools = elementPools.get(tag);\r\n    if (!isUndefined(pools)) {\r\n        var key = vNode.key;\r\n        var pool = key === null ? pools.nonKeyed : pools.keyed.get(key);\r\n        if (!isUndefined(pool)) {\r\n            var recycledVNode = pool.pop();\r\n            if (!isUndefined(recycledVNode)) {\r\n                patchElement(recycledVNode, vNode, null, lifecycle, context, isSVG, true);\r\n                return vNode.dom;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction poolElement(vNode) {\r\n    var tag = vNode.type;\r\n    var key = vNode.key;\r\n    var pools = elementPools.get(tag);\r\n    if (isUndefined(pools)) {\r\n        pools = {\r\n            nonKeyed: [],\r\n            keyed: new Map()\r\n        };\r\n        elementPools.set(tag, pools);\r\n    }\r\n    if (isNull(key)) {\r\n        pools.nonKeyed.push(vNode);\r\n    }\r\n    else {\r\n        var pool = pools.keyed.get(key);\r\n        if (isUndefined(pool)) {\r\n            pool = [];\r\n            pools.keyed.set(key, pool);\r\n        }\r\n        pool.push(vNode);\r\n    }\r\n}\r\nfunction recycleComponent(vNode, lifecycle, context, isSVG) {\r\n    var type = vNode.type;\r\n    var pools = componentPools.get(type);\r\n    if (!isUndefined(pools)) {\r\n        var key = vNode.key;\r\n        var pool = key === null ? pools.nonKeyed : pools.keyed.get(key);\r\n        if (!isUndefined(pool)) {\r\n            var recycledVNode = pool.pop();\r\n            if (!isUndefined(recycledVNode)) {\r\n                var flags = vNode.flags;\r\n                var failed = patchComponent(recycledVNode, vNode, null, lifecycle, context, isSVG, flags & 4 /* ComponentClass */, true);\r\n                if (!failed) {\r\n                    return vNode.dom;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction poolComponent(vNode) {\r\n    var hooks = vNode.ref;\r\n    var nonRecycleHooks = hooks && (hooks.onComponentWillMount ||\r\n        hooks.onComponentWillUnmount ||\r\n        hooks.onComponentDidMount ||\r\n        hooks.onComponentWillUpdate ||\r\n        hooks.onComponentDidUpdate);\r\n    if (nonRecycleHooks) {\r\n        return;\r\n    }\r\n    var type = vNode.type;\r\n    var key = vNode.key;\r\n    var pools = componentPools.get(type);\r\n    if (isUndefined(pools)) {\r\n        pools = {\r\n            nonKeyed: [],\r\n            keyed: new Map()\r\n        };\r\n        componentPools.set(type, pools);\r\n    }\r\n    if (isNull(key)) {\r\n        pools.nonKeyed.push(vNode);\r\n    }\r\n    else {\r\n        var pool = pools.keyed.get(key);\r\n        if (isUndefined(pool)) {\r\n            pool = [];\r\n            pools.keyed.set(key, pool);\r\n        }\r\n        pool.push(vNode);\r\n    }\r\n}\n\nfunction unmount(vNode, parentDom, lifecycle, canRecycle, isRecycling) {\r\n    var flags = vNode.flags;\r\n    if (flags & 28 /* Component */) {\r\n        unmountComponent(vNode, parentDom, lifecycle, canRecycle, isRecycling);\r\n    }\r\n    else if (flags & 3970 /* Element */) {\r\n        unmountElement(vNode, parentDom, lifecycle, canRecycle, isRecycling);\r\n    }\r\n    else if (flags & (1 /* Text */ | 4096 /* Void */)) {\r\n        unmountVoidOrText(vNode, parentDom);\r\n    }\r\n}\r\nfunction unmountVoidOrText(vNode, parentDom) {\r\n    if (parentDom) {\r\n        removeChild(parentDom, vNode.dom);\r\n    }\r\n}\r\nfunction unmountComponent(vNode, parentDom, lifecycle, canRecycle, isRecycling) {\r\n    var instance = vNode.children;\r\n    var flags = vNode.flags;\r\n    var isStatefulComponent$$1 = flags & 4;\r\n    var ref = vNode.ref;\r\n    var dom = vNode.dom;\r\n    if (!isRecycling) {\r\n        if (isStatefulComponent$$1) {\r\n            if (!instance._unmounted) {\r\n                instance._ignoreSetState = true;\r\n                options.beforeUnmount && options.beforeUnmount(vNode);\r\n                instance.componentWillUnmount && instance.componentWillUnmount();\r\n                if (ref && !isRecycling) {\r\n                    ref(null);\r\n                }\r\n                instance._unmounted = true;\r\n                options.findDOMNodeEnabled && componentToDOMNodeMap.delete(instance);\r\n                unmount(instance._lastInput, null, instance._lifecycle, false, isRecycling);\r\n            }\r\n        }\r\n        else {\r\n            if (!isNullOrUndef(ref)) {\r\n                if (!isNullOrUndef(ref.onComponentWillUnmount)) {\r\n                    ref.onComponentWillUnmount(dom);\r\n                }\r\n            }\r\n            unmount(instance, null, lifecycle, false, isRecycling);\r\n        }\r\n    }\r\n    if (parentDom) {\r\n        var lastInput = instance._lastInput;\r\n        if (isNullOrUndef(lastInput)) {\r\n            lastInput = instance;\r\n        }\r\n        removeChild(parentDom, dom);\r\n    }\r\n    if (options.recyclingEnabled && !isStatefulComponent$$1 && (parentDom || canRecycle)) {\r\n        poolComponent(vNode);\r\n    }\r\n}\r\nfunction unmountElement(vNode, parentDom, lifecycle, canRecycle, isRecycling) {\r\n    var dom = vNode.dom;\r\n    var ref = vNode.ref;\r\n    var events = vNode.events;\r\n    if (ref && !isRecycling) {\r\n        unmountRef(ref);\r\n    }\r\n    var children = vNode.children;\r\n    if (!isNullOrUndef(children)) {\r\n        unmountChildren$1(children, lifecycle, isRecycling);\r\n    }\r\n    if (!isNull(events)) {\r\n        for (var name in events) {\r\n            // do not add a hasOwnProperty check here, it affects performance\r\n            patchEvent(name, events[name], null, dom);\r\n            events[name] = null;\r\n        }\r\n    }\r\n    if (parentDom) {\r\n        removeChild(parentDom, dom);\r\n    }\r\n    if (options.recyclingEnabled && (parentDom || canRecycle)) {\r\n        poolElement(vNode);\r\n    }\r\n}\r\nfunction unmountChildren$1(children, lifecycle, isRecycling) {\r\n    if (isArray(children)) {\r\n        for (var i = 0, len = children.length; i < len; i++) {\r\n            var child = children[i];\r\n            if (!isInvalid(child) && isObject(child)) {\r\n                unmount(child, null, lifecycle, false, isRecycling);\r\n            }\r\n        }\r\n    }\r\n    else if (isObject(children)) {\r\n        unmount(children, null, lifecycle, false, isRecycling);\r\n    }\r\n}\r\nfunction unmountRef(ref) {\r\n    if (isFunction(ref)) {\r\n        ref(null);\r\n    }\r\n    else {\r\n        if (isInvalid(ref)) {\r\n            return;\r\n        }\r\n        if (true) {\r\n            throwError('string \"refs\" are not supported in Inferno 1.0. Use callback \"refs\" instead.');\r\n        }\r\n        throwError();\r\n    }\r\n}\n\n// rather than use a Map, like we did before, we can use an array here\r\n// given there shouldn't be THAT many roots on the page, the difference\r\n// in performance is huge: https://esbench.com/bench/5802a691330ab09900a1a2da\r\nvar roots = [];\r\nvar componentToDOMNodeMap = new Map();\r\noptions.roots = roots;\r\nfunction findDOMNode(ref) {\r\n    if (!options.findDOMNodeEnabled) {\r\n        if (true) {\r\n            throwError('findDOMNode() has been disabled, use Inferno.options.findDOMNodeEnabled = true; enabled findDOMNode(). Warning this can significantly impact performance!');\r\n        }\r\n        throwError();\r\n    }\r\n    var dom = ref && ref.nodeType ? ref : null;\r\n    return componentToDOMNodeMap.get(ref) || dom;\r\n}\r\nfunction getRoot(dom) {\r\n    for (var i = 0, len = roots.length; i < len; i++) {\r\n        var root = roots[i];\r\n        if (root.dom === dom) {\r\n            return root;\r\n        }\r\n    }\r\n    return null;\r\n}\r\nfunction setRoot(dom, input, lifecycle) {\r\n    var root = {\r\n        dom: dom,\r\n        input: input,\r\n        lifecycle: lifecycle\r\n    };\r\n    roots.push(root);\r\n    return root;\r\n}\r\nfunction removeRoot(root) {\r\n    for (var i = 0, len = roots.length; i < len; i++) {\r\n        if (roots[i] === root) {\r\n            roots.splice(i, 1);\r\n            return;\r\n        }\r\n    }\r\n}\r\nif (true) {\r\n    if (isBrowser && document.body === null) {\r\n        warning('Inferno warning: you cannot initialize inferno without \"document.body\". Wait on \"DOMContentLoaded\" event, add script to bottom of body, or use async/defer attributes on script tag.');\r\n    }\r\n}\r\nvar documentBody = isBrowser ? document.body : null;\r\nfunction render(input, parentDom) {\r\n    if (documentBody === parentDom) {\r\n        if (true) {\r\n            throwError('you cannot render() to the \"document.body\". Use an empty element as a container instead.');\r\n        }\r\n        throwError();\r\n    }\r\n    if (input === NO_OP) {\r\n        return;\r\n    }\r\n    var root = getRoot(parentDom);\r\n    if (isNull(root)) {\r\n        var lifecycle = new Lifecycle();\r\n        if (!isInvalid(input)) {\r\n            if (input.dom) {\r\n                input = cloneVNode(input);\r\n            }\r\n            if (!hydrateRoot(input, parentDom, lifecycle)) {\r\n                mount(input, parentDom, lifecycle, EMPTY_OBJ, false);\r\n            }\r\n            root = setRoot(parentDom, input, lifecycle);\r\n            lifecycle.trigger();\r\n        }\r\n    }\r\n    else {\r\n        var lifecycle$1 = root.lifecycle;\r\n        lifecycle$1.listeners = [];\r\n        if (isNullOrUndef(input)) {\r\n            unmount(root.input, parentDom, lifecycle$1, false, false);\r\n            removeRoot(root);\r\n        }\r\n        else {\r\n            if (input.dom) {\r\n                input = cloneVNode(input);\r\n            }\r\n            patch(root.input, input, parentDom, lifecycle$1, EMPTY_OBJ, false, false);\r\n        }\r\n        lifecycle$1.trigger();\r\n        root.input = input;\r\n    }\r\n    if (root) {\r\n        var rootInput = root.input;\r\n        if (rootInput && (rootInput.flags & 28 /* Component */)) {\r\n            return rootInput.children;\r\n        }\r\n    }\r\n}\r\nfunction createRenderer(parentDom) {\r\n    return function renderer(lastInput, nextInput) {\r\n        if (!parentDom) {\r\n            parentDom = lastInput;\r\n        }\r\n        render(nextInput, parentDom);\r\n    };\r\n}\n\nfunction patch(lastVNode, nextVNode, parentDom, lifecycle, context, isSVG, isRecycling) {\r\n    if (lastVNode !== nextVNode) {\r\n        var lastFlags = lastVNode.flags;\r\n        var nextFlags = nextVNode.flags;\r\n        if (nextFlags & 28 /* Component */) {\r\n            if (lastFlags & 28 /* Component */) {\r\n                patchComponent(lastVNode, nextVNode, parentDom, lifecycle, context, isSVG, nextFlags & 4 /* ComponentClass */, isRecycling);\r\n            }\r\n            else {\r\n                replaceVNode(parentDom, mountComponent(nextVNode, null, lifecycle, context, isSVG, nextFlags & 4 /* ComponentClass */), lastVNode, lifecycle, isRecycling);\r\n            }\r\n        }\r\n        else if (nextFlags & 3970 /* Element */) {\r\n            if (lastFlags & 3970 /* Element */) {\r\n                patchElement(lastVNode, nextVNode, parentDom, lifecycle, context, isSVG, isRecycling);\r\n            }\r\n            else {\r\n                replaceVNode(parentDom, mountElement(nextVNode, null, lifecycle, context, isSVG), lastVNode, lifecycle, isRecycling);\r\n            }\r\n        }\r\n        else if (nextFlags & 1 /* Text */) {\r\n            if (lastFlags & 1 /* Text */) {\r\n                patchText(lastVNode, nextVNode);\r\n            }\r\n            else {\r\n                replaceVNode(parentDom, mountText(nextVNode, null), lastVNode, lifecycle, isRecycling);\r\n            }\r\n        }\r\n        else if (nextFlags & 4096 /* Void */) {\r\n            if (lastFlags & 4096 /* Void */) {\r\n                patchVoid(lastVNode, nextVNode);\r\n            }\r\n            else {\r\n                replaceVNode(parentDom, mountVoid(nextVNode, null), lastVNode, lifecycle, isRecycling);\r\n            }\r\n        }\r\n        else {\r\n            // Error case: mount new one replacing old one\r\n            replaceLastChildAndUnmount(lastVNode, nextVNode, parentDom, lifecycle, context, isSVG, isRecycling);\r\n        }\r\n    }\r\n}\r\nfunction unmountChildren(children, dom, lifecycle, isRecycling) {\r\n    if (isVNode(children)) {\r\n        unmount(children, dom, lifecycle, true, isRecycling);\r\n    }\r\n    else if (isArray(children)) {\r\n        removeAllChildren(dom, children, lifecycle, isRecycling);\r\n    }\r\n    else {\r\n        dom.textContent = '';\r\n    }\r\n}\r\nfunction patchElement(lastVNode, nextVNode, parentDom, lifecycle, context, isSVG, isRecycling) {\r\n    var nextTag = nextVNode.type;\r\n    var lastTag = lastVNode.type;\r\n    if (lastTag !== nextTag) {\r\n        replaceWithNewNode(lastVNode, nextVNode, parentDom, lifecycle, context, isSVG, isRecycling);\r\n    }\r\n    else {\r\n        var dom = lastVNode.dom;\r\n        var lastProps = lastVNode.props;\r\n        var nextProps = nextVNode.props;\r\n        var lastChildren = lastVNode.children;\r\n        var nextChildren = nextVNode.children;\r\n        var lastFlags = lastVNode.flags;\r\n        var nextFlags = nextVNode.flags;\r\n        var nextRef = nextVNode.ref;\r\n        var lastEvents = lastVNode.events;\r\n        var nextEvents = nextVNode.events;\r\n        nextVNode.dom = dom;\r\n        if (isSVG || (nextFlags & 128 /* SvgElement */)) {\r\n            isSVG = true;\r\n        }\r\n        if (lastChildren !== nextChildren) {\r\n            patchChildren(lastFlags, nextFlags, lastChildren, nextChildren, dom, lifecycle, context, isSVG, isRecycling);\r\n        }\r\n        var hasControlledValue = false;\r\n        if (!(nextFlags & 2 /* HtmlElement */)) {\r\n            hasControlledValue = processElement(nextFlags, nextVNode, dom, false);\r\n        }\r\n        // inlined patchProps  -- starts --\r\n        if (lastProps !== nextProps) {\r\n            var lastPropsOrEmpty = lastProps || EMPTY_OBJ;\r\n            var nextPropsOrEmpty = nextProps || EMPTY_OBJ;\r\n            if (nextPropsOrEmpty !== EMPTY_OBJ) {\r\n                for (var prop in nextPropsOrEmpty) {\r\n                    // do not add a hasOwnProperty check here, it affects performance\r\n                    var nextValue = nextPropsOrEmpty[prop];\r\n                    var lastValue = lastPropsOrEmpty[prop];\r\n                    if (isNullOrUndef(nextValue)) {\r\n                        removeProp(prop, nextValue, dom);\r\n                    }\r\n                    else {\r\n                        patchProp(prop, lastValue, nextValue, dom, isSVG, hasControlledValue);\r\n                    }\r\n                }\r\n            }\r\n            if (lastPropsOrEmpty !== EMPTY_OBJ) {\r\n                for (var prop$1 in lastPropsOrEmpty) {\r\n                    // do not add a hasOwnProperty check here, it affects performance\r\n                    if (isNullOrUndef(nextPropsOrEmpty[prop$1])) {\r\n                        removeProp(prop$1, lastPropsOrEmpty[prop$1], dom);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // inlined patchProps  -- ends --\r\n        if (lastEvents !== nextEvents) {\r\n            patchEvents(lastEvents, nextEvents, dom);\r\n        }\r\n        if (nextRef) {\r\n            if (lastVNode.ref !== nextRef || isRecycling) {\r\n                mountRef(dom, nextRef, lifecycle);\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction patchChildren(lastFlags, nextFlags, lastChildren, nextChildren, dom, lifecycle, context, isSVG, isRecycling) {\r\n    var patchArray = false;\r\n    var patchKeyed = false;\r\n    if (nextFlags & 64 /* HasNonKeyedChildren */) {\r\n        patchArray = true;\r\n    }\r\n    else if ((lastFlags & 32 /* HasKeyedChildren */) && (nextFlags & 32 /* HasKeyedChildren */)) {\r\n        patchKeyed = true;\r\n        patchArray = true;\r\n    }\r\n    else if (isInvalid(nextChildren)) {\r\n        unmountChildren(lastChildren, dom, lifecycle, isRecycling);\r\n    }\r\n    else if (isInvalid(lastChildren)) {\r\n        if (isStringOrNumber(nextChildren)) {\r\n            setTextContent(dom, nextChildren);\r\n        }\r\n        else {\r\n            if (isArray(nextChildren)) {\r\n                mountArrayChildren(nextChildren, dom, lifecycle, context, isSVG);\r\n            }\r\n            else {\r\n                mount(nextChildren, dom, lifecycle, context, isSVG);\r\n            }\r\n        }\r\n    }\r\n    else if (isStringOrNumber(nextChildren)) {\r\n        if (isStringOrNumber(lastChildren)) {\r\n            updateTextContent(dom, nextChildren);\r\n        }\r\n        else {\r\n            unmountChildren(lastChildren, dom, lifecycle, isRecycling);\r\n            setTextContent(dom, nextChildren);\r\n        }\r\n    }\r\n    else if (isArray(nextChildren)) {\r\n        if (isArray(lastChildren)) {\r\n            patchArray = true;\r\n            if (isKeyed(lastChildren, nextChildren)) {\r\n                patchKeyed = true;\r\n            }\r\n        }\r\n        else {\r\n            unmountChildren(lastChildren, dom, lifecycle, isRecycling);\r\n            mountArrayChildren(nextChildren, dom, lifecycle, context, isSVG);\r\n        }\r\n    }\r\n    else if (isArray(lastChildren)) {\r\n        removeAllChildren(dom, lastChildren, lifecycle, isRecycling);\r\n        mount(nextChildren, dom, lifecycle, context, isSVG);\r\n    }\r\n    else if (isVNode(nextChildren)) {\r\n        if (isVNode(lastChildren)) {\r\n            patch(lastChildren, nextChildren, dom, lifecycle, context, isSVG, isRecycling);\r\n        }\r\n        else {\r\n            unmountChildren(lastChildren, dom, lifecycle, isRecycling);\r\n            mount(nextChildren, dom, lifecycle, context, isSVG);\r\n        }\r\n    }\r\n    if (patchArray) {\r\n        if (patchKeyed) {\r\n            patchKeyedChildren(lastChildren, nextChildren, dom, lifecycle, context, isSVG, isRecycling);\r\n        }\r\n        else {\r\n            patchNonKeyedChildren(lastChildren, nextChildren, dom, lifecycle, context, isSVG, isRecycling);\r\n        }\r\n    }\r\n}\r\nfunction patchComponent(lastVNode, nextVNode, parentDom, lifecycle, context, isSVG, isClass, isRecycling) {\r\n    var lastType = lastVNode.type;\r\n    var nextType = nextVNode.type;\r\n    var lastKey = lastVNode.key;\r\n    var nextKey = nextVNode.key;\r\n    if (lastType !== nextType || lastKey !== nextKey) {\r\n        replaceWithNewNode(lastVNode, nextVNode, parentDom, lifecycle, context, isSVG, isRecycling);\r\n        return false;\r\n    }\r\n    else {\r\n        var nextProps = nextVNode.props || EMPTY_OBJ;\r\n        if (isClass) {\r\n            var instance = lastVNode.children;\r\n            if (instance._unmounted) {\r\n                if (isNull(parentDom)) {\r\n                    return true;\r\n                }\r\n                replaceChild(parentDom, mountComponent(nextVNode, null, lifecycle, context, isSVG, nextVNode.flags & 4 /* ComponentClass */), lastVNode.dom);\r\n            }\r\n            else {\r\n                var lastState = instance.state;\r\n                var nextState = instance.state;\r\n                var lastProps = instance.props;\r\n                var childContext = instance.getChildContext();\r\n                nextVNode.children = instance;\r\n                instance._isSVG = isSVG;\r\n                instance._syncSetState = false;\r\n                if (isNullOrUndef(childContext)) {\r\n                    childContext = context;\r\n                }\r\n                else {\r\n                    childContext = assign({}, context, childContext);\r\n                }\r\n                var lastInput = instance._lastInput;\r\n                var nextInput = instance._updateComponent(lastState, nextState, lastProps, nextProps, context, false, false);\r\n                var didUpdate = true;\r\n                instance._childContext = childContext;\r\n                if (isInvalid(nextInput)) {\r\n                    nextInput = createVoidVNode();\r\n                }\r\n                else if (nextInput === NO_OP) {\r\n                    nextInput = lastInput;\r\n                    didUpdate = false;\r\n                }\r\n                else if (isStringOrNumber(nextInput)) {\r\n                    nextInput = createTextVNode(nextInput, null);\r\n                }\r\n                else if (isArray(nextInput)) {\r\n                    if (true) {\r\n                        throwError('a valid Inferno VNode (or null) must be returned from a component render. You may have returned an array or an invalid object.');\r\n                    }\r\n                    throwError();\r\n                }\r\n                else if (isObject(nextInput) && nextInput.dom) {\r\n                    nextInput = cloneVNode(nextInput);\r\n                }\r\n                if (nextInput.flags & 28 /* Component */) {\r\n                    nextInput.parentVNode = nextVNode;\r\n                }\r\n                else if (lastInput.flags & 28 /* Component */) {\r\n                    lastInput.parentVNode = nextVNode;\r\n                }\r\n                instance._lastInput = nextInput;\r\n                instance._vNode = nextVNode;\r\n                if (didUpdate) {\r\n                    patch(lastInput, nextInput, parentDom, lifecycle, childContext, isSVG, isRecycling);\r\n                    instance.componentDidUpdate(lastProps, lastState);\r\n                    options.afterUpdate && options.afterUpdate(nextVNode);\r\n                    options.findDOMNodeEnabled && componentToDOMNodeMap.set(instance, nextInput.dom);\r\n                }\r\n                instance._syncSetState = true;\r\n                nextVNode.dom = nextInput.dom;\r\n            }\r\n        }\r\n        else {\r\n            var shouldUpdate = true;\r\n            var lastProps$1 = lastVNode.props;\r\n            var nextHooks = nextVNode.ref;\r\n            var nextHooksDefined = !isNullOrUndef(nextHooks);\r\n            var lastInput$1 = lastVNode.children;\r\n            var nextInput$1 = lastInput$1;\r\n            nextVNode.dom = lastVNode.dom;\r\n            nextVNode.children = lastInput$1;\r\n            if (lastKey !== nextKey) {\r\n                shouldUpdate = true;\r\n            }\r\n            else {\r\n                if (nextHooksDefined && !isNullOrUndef(nextHooks.onComponentShouldUpdate)) {\r\n                    shouldUpdate = nextHooks.onComponentShouldUpdate(lastProps$1, nextProps);\r\n                }\r\n            }\r\n            if (shouldUpdate !== false) {\r\n                if (nextHooksDefined && !isNullOrUndef(nextHooks.onComponentWillUpdate)) {\r\n                    nextHooks.onComponentWillUpdate(lastProps$1, nextProps);\r\n                }\r\n                nextInput$1 = nextType(nextProps, context);\r\n                if (isInvalid(nextInput$1)) {\r\n                    nextInput$1 = createVoidVNode();\r\n                }\r\n                else if (isStringOrNumber(nextInput$1) && nextInput$1 !== NO_OP) {\r\n                    nextInput$1 = createTextVNode(nextInput$1, null);\r\n                }\r\n                else if (isArray(nextInput$1)) {\r\n                    if (true) {\r\n                        throwError('a valid Inferno VNode (or null) must be returned from a component render. You may have returned an array or an invalid object.');\r\n                    }\r\n                    throwError();\r\n                }\r\n                else if (isObject(nextInput$1) && nextInput$1.dom) {\r\n                    nextInput$1 = cloneVNode(nextInput$1);\r\n                }\r\n                if (nextInput$1 !== NO_OP) {\r\n                    patch(lastInput$1, nextInput$1, parentDom, lifecycle, context, isSVG, isRecycling);\r\n                    nextVNode.children = nextInput$1;\r\n                    if (nextHooksDefined && !isNullOrUndef(nextHooks.onComponentDidUpdate)) {\r\n                        nextHooks.onComponentDidUpdate(lastProps$1, nextProps);\r\n                    }\r\n                    nextVNode.dom = nextInput$1.dom;\r\n                }\r\n            }\r\n            if (nextInput$1.flags & 28 /* Component */) {\r\n                nextInput$1.parentVNode = nextVNode;\r\n            }\r\n            else if (lastInput$1.flags & 28 /* Component */) {\r\n                lastInput$1.parentVNode = nextVNode;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\r\nfunction patchText(lastVNode, nextVNode) {\r\n    var nextText = nextVNode.children;\r\n    var dom = lastVNode.dom;\r\n    nextVNode.dom = dom;\r\n    if (lastVNode.children !== nextText) {\r\n        dom.nodeValue = nextText;\r\n    }\r\n}\r\nfunction patchVoid(lastVNode, nextVNode) {\r\n    nextVNode.dom = lastVNode.dom;\r\n}\r\nfunction patchNonKeyedChildren(lastChildren, nextChildren, dom, lifecycle, context, isSVG, isRecycling) {\r\n    var lastChildrenLength = lastChildren.length;\r\n    var nextChildrenLength = nextChildren.length;\r\n    var commonLength = lastChildrenLength > nextChildrenLength ? nextChildrenLength : lastChildrenLength;\r\n    var i = 0;\r\n    for (; i < commonLength; i++) {\r\n        var nextChild = nextChildren[i];\r\n        if (nextChild.dom) {\r\n            nextChild = nextChildren[i] = cloneVNode(nextChild);\r\n        }\r\n        patch(lastChildren[i], nextChild, dom, lifecycle, context, isSVG, isRecycling);\r\n    }\r\n    if (lastChildrenLength < nextChildrenLength) {\r\n        for (i = commonLength; i < nextChildrenLength; i++) {\r\n            var nextChild$1 = nextChildren[i];\r\n            if (nextChild$1.dom) {\r\n                nextChild$1 = nextChildren[i] = cloneVNode(nextChild$1);\r\n            }\r\n            appendChild(dom, mount(nextChild$1, null, lifecycle, context, isSVG));\r\n        }\r\n    }\r\n    else if (nextChildrenLength === 0) {\r\n        removeAllChildren(dom, lastChildren, lifecycle, isRecycling);\r\n    }\r\n    else if (lastChildrenLength > nextChildrenLength) {\r\n        for (i = commonLength; i < lastChildrenLength; i++) {\r\n            unmount(lastChildren[i], dom, lifecycle, false, isRecycling);\r\n        }\r\n    }\r\n}\r\nfunction patchKeyedChildren(a, b, dom, lifecycle, context, isSVG, isRecycling) {\r\n    var aLength = a.length;\r\n    var bLength = b.length;\r\n    var aEnd = aLength - 1;\r\n    var bEnd = bLength - 1;\r\n    var aStart = 0;\r\n    var bStart = 0;\r\n    var i;\r\n    var j;\r\n    var aNode;\r\n    var bNode;\r\n    var nextNode;\r\n    var nextPos;\r\n    var node;\r\n    if (aLength === 0) {\r\n        if (bLength !== 0) {\r\n            mountArrayChildren(b, dom, lifecycle, context, isSVG);\r\n        }\r\n        return;\r\n    }\r\n    else if (bLength === 0) {\r\n        removeAllChildren(dom, a, lifecycle, isRecycling);\r\n        return;\r\n    }\r\n    var aStartNode = a[aStart];\r\n    var bStartNode = b[bStart];\r\n    var aEndNode = a[aEnd];\r\n    var bEndNode = b[bEnd];\r\n    if (bStartNode.dom) {\r\n        b[bStart] = bStartNode = cloneVNode(bStartNode);\r\n    }\r\n    if (bEndNode.dom) {\r\n        b[bEnd] = bEndNode = cloneVNode(bEndNode);\r\n    }\r\n    // Step 1\r\n    /* eslint no-constant-condition: 0 */\r\n    outer: while (true) {\r\n        // Sync nodes with the same key at the beginning.\r\n        while (aStartNode.key === bStartNode.key) {\r\n            patch(aStartNode, bStartNode, dom, lifecycle, context, isSVG, isRecycling);\r\n            aStart++;\r\n            bStart++;\r\n            if (aStart > aEnd || bStart > bEnd) {\r\n                break outer;\r\n            }\r\n            aStartNode = a[aStart];\r\n            bStartNode = b[bStart];\r\n            if (bStartNode.dom) {\r\n                b[bStart] = bStartNode = cloneVNode(bStartNode);\r\n            }\r\n        }\r\n        // Sync nodes with the same key at the end.\r\n        while (aEndNode.key === bEndNode.key) {\r\n            patch(aEndNode, bEndNode, dom, lifecycle, context, isSVG, isRecycling);\r\n            aEnd--;\r\n            bEnd--;\r\n            if (aStart > aEnd || bStart > bEnd) {\r\n                break outer;\r\n            }\r\n            aEndNode = a[aEnd];\r\n            bEndNode = b[bEnd];\r\n            if (bEndNode.dom) {\r\n                b[bEnd] = bEndNode = cloneVNode(bEndNode);\r\n            }\r\n        }\r\n        // Move and sync nodes from right to left.\r\n        if (aEndNode.key === bStartNode.key) {\r\n            patch(aEndNode, bStartNode, dom, lifecycle, context, isSVG, isRecycling);\r\n            insertOrAppend(dom, bStartNode.dom, aStartNode.dom);\r\n            aEnd--;\r\n            bStart++;\r\n            aEndNode = a[aEnd];\r\n            bStartNode = b[bStart];\r\n            if (bStartNode.dom) {\r\n                b[bStart] = bStartNode = cloneVNode(bStartNode);\r\n            }\r\n            continue;\r\n        }\r\n        // Move and sync nodes from left to right.\r\n        if (aStartNode.key === bEndNode.key) {\r\n            patch(aStartNode, bEndNode, dom, lifecycle, context, isSVG, isRecycling);\r\n            nextPos = bEnd + 1;\r\n            nextNode = nextPos < b.length ? b[nextPos].dom : null;\r\n            insertOrAppend(dom, bEndNode.dom, nextNode);\r\n            aStart++;\r\n            bEnd--;\r\n            aStartNode = a[aStart];\r\n            bEndNode = b[bEnd];\r\n            if (bEndNode.dom) {\r\n                b[bEnd] = bEndNode = cloneVNode(bEndNode);\r\n            }\r\n            continue;\r\n        }\r\n        break;\r\n    }\r\n    if (aStart > aEnd) {\r\n        if (bStart <= bEnd) {\r\n            nextPos = bEnd + 1;\r\n            nextNode = nextPos < b.length ? b[nextPos].dom : null;\r\n            while (bStart <= bEnd) {\r\n                node = b[bStart];\r\n                if (node.dom) {\r\n                    b[bStart] = node = cloneVNode(node);\r\n                }\r\n                bStart++;\r\n                insertOrAppend(dom, mount(node, null, lifecycle, context, isSVG), nextNode);\r\n            }\r\n        }\r\n    }\r\n    else if (bStart > bEnd) {\r\n        while (aStart <= aEnd) {\r\n            unmount(a[aStart++], dom, lifecycle, false, isRecycling);\r\n        }\r\n    }\r\n    else {\r\n        aLength = aEnd - aStart + 1;\r\n        bLength = bEnd - bStart + 1;\r\n        var sources = new Array(bLength);\r\n        // Mark all nodes as inserted.\r\n        for (i = 0; i < bLength; i++) {\r\n            sources[i] = -1;\r\n        }\r\n        var moved = false;\r\n        var pos = 0;\r\n        var patched = 0;\r\n        // When sizes are small, just loop them through\r\n        if ((bLength <= 4) || (aLength * bLength <= 16)) {\r\n            for (i = aStart; i <= aEnd; i++) {\r\n                aNode = a[i];\r\n                if (patched < bLength) {\r\n                    for (j = bStart; j <= bEnd; j++) {\r\n                        bNode = b[j];\r\n                        if (aNode.key === bNode.key) {\r\n                            sources[j - bStart] = i;\r\n                            if (pos > j) {\r\n                                moved = true;\r\n                            }\r\n                            else {\r\n                                pos = j;\r\n                            }\r\n                            if (bNode.dom) {\r\n                                b[j] = bNode = cloneVNode(bNode);\r\n                            }\r\n                            patch(aNode, bNode, dom, lifecycle, context, isSVG, isRecycling);\r\n                            patched++;\r\n                            a[i] = null;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            var keyIndex = new Map();\r\n            // Map keys by their index in array\r\n            for (i = bStart; i <= bEnd; i++) {\r\n                keyIndex.set(b[i].key, i);\r\n            }\r\n            // Try to patch same keys\r\n            for (i = aStart; i <= aEnd; i++) {\r\n                aNode = a[i];\r\n                if (patched < bLength) {\r\n                    j = keyIndex.get(aNode.key);\r\n                    if (!isUndefined(j)) {\r\n                        bNode = b[j];\r\n                        sources[j - bStart] = i;\r\n                        if (pos > j) {\r\n                            moved = true;\r\n                        }\r\n                        else {\r\n                            pos = j;\r\n                        }\r\n                        if (bNode.dom) {\r\n                            b[j] = bNode = cloneVNode(bNode);\r\n                        }\r\n                        patch(aNode, bNode, dom, lifecycle, context, isSVG, isRecycling);\r\n                        patched++;\r\n                        a[i] = null;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // fast-path: if nothing patched remove all old and add all new\r\n        if (aLength === a.length && patched === 0) {\r\n            removeAllChildren(dom, a, lifecycle, isRecycling);\r\n            while (bStart < bLength) {\r\n                node = b[bStart];\r\n                if (node.dom) {\r\n                    b[bStart] = node = cloneVNode(node);\r\n                }\r\n                bStart++;\r\n                insertOrAppend(dom, mount(node, null, lifecycle, context, isSVG), null);\r\n            }\r\n        }\r\n        else {\r\n            i = aLength - patched;\r\n            while (i > 0) {\r\n                aNode = a[aStart++];\r\n                if (!isNull(aNode)) {\r\n                    unmount(aNode, dom, lifecycle, true, isRecycling);\r\n                    i--;\r\n                }\r\n            }\r\n            if (moved) {\r\n                var seq = lis_algorithm(sources);\r\n                j = seq.length - 1;\r\n                for (i = bLength - 1; i >= 0; i--) {\r\n                    if (sources[i] === -1) {\r\n                        pos = i + bStart;\r\n                        node = b[pos];\r\n                        if (node.dom) {\r\n                            b[pos] = node = cloneVNode(node);\r\n                        }\r\n                        nextPos = pos + 1;\r\n                        nextNode = nextPos < b.length ? b[nextPos].dom : null;\r\n                        insertOrAppend(dom, mount(node, dom, lifecycle, context, isSVG), nextNode);\r\n                    }\r\n                    else {\r\n                        if (j < 0 || i !== seq[j]) {\r\n                            pos = i + bStart;\r\n                            node = b[pos];\r\n                            nextPos = pos + 1;\r\n                            nextNode = nextPos < b.length ? b[nextPos].dom : null;\r\n                            insertOrAppend(dom, node.dom, nextNode);\r\n                        }\r\n                        else {\r\n                            j--;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else if (patched !== bLength) {\r\n                // when patched count doesn't match b length we need to insert those new ones\r\n                // loop backwards so we can use insertBefore\r\n                for (i = bLength - 1; i >= 0; i--) {\r\n                    if (sources[i] === -1) {\r\n                        pos = i + bStart;\r\n                        node = b[pos];\r\n                        if (node.dom) {\r\n                            b[pos] = node = cloneVNode(node);\r\n                        }\r\n                        nextPos = pos + 1;\r\n                        nextNode = nextPos < b.length ? b[nextPos].dom : null;\r\n                        insertOrAppend(dom, mount(node, null, lifecycle, context, isSVG), nextNode);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n// // https://en.wikipedia.org/wiki/Longest_increasing_subsequence\r\nfunction lis_algorithm(arr) {\r\n    var p = arr.slice(0);\r\n    var result = [0];\r\n    var i;\r\n    var j;\r\n    var u;\r\n    var v;\r\n    var c;\r\n    var len = arr.length;\r\n    for (i = 0; i < len; i++) {\r\n        var arrI = arr[i];\r\n        if (arrI === -1) {\r\n            continue;\r\n        }\r\n        j = result[result.length - 1];\r\n        if (arr[j] < arrI) {\r\n            p[i] = j;\r\n            result.push(i);\r\n            continue;\r\n        }\r\n        u = 0;\r\n        v = result.length - 1;\r\n        while (u < v) {\r\n            c = ((u + v) / 2) | 0;\r\n            if (arr[result[c]] < arrI) {\r\n                u = c + 1;\r\n            }\r\n            else {\r\n                v = c;\r\n            }\r\n        }\r\n        if (arrI < arr[result[u]]) {\r\n            if (u > 0) {\r\n                p[i] = result[u - 1];\r\n            }\r\n            result[u] = i;\r\n        }\r\n    }\r\n    u = result.length;\r\n    v = result[u - 1];\r\n    while (u-- > 0) {\r\n        result[u] = v;\r\n        v = p[v];\r\n    }\r\n    return result;\r\n}\r\nfunction patchProp(prop, lastValue, nextValue, dom, isSVG, hasControlledValue) {\r\n    if (prop in skipProps || (hasControlledValue && prop === 'value')) {\r\n        return;\r\n    }\r\n    else if (prop in booleanProps) {\r\n        dom[prop] = !!nextValue;\r\n    }\r\n    else if (prop in strictProps) {\r\n        var value = isNullOrUndef(nextValue) ? '' : nextValue;\r\n        if (dom[prop] !== value) {\r\n            dom[prop] = value;\r\n        }\r\n    }\r\n    else if (lastValue !== nextValue) {\r\n        if (isAttrAnEvent(prop)) {\r\n            patchEvent(prop, lastValue, nextValue, dom);\r\n        }\r\n        else if (isNullOrUndef(nextValue)) {\r\n            dom.removeAttribute(prop);\r\n        }\r\n        else if (prop === 'className') {\r\n            if (isSVG) {\r\n                dom.setAttribute('class', nextValue);\r\n            }\r\n            else {\r\n                dom.className = nextValue;\r\n            }\r\n        }\r\n        else if (prop === 'style') {\r\n            patchStyle(lastValue, nextValue, dom);\r\n        }\r\n        else if (prop === 'dangerouslySetInnerHTML') {\r\n            var lastHtml = lastValue && lastValue.__html;\r\n            var nextHtml = nextValue && nextValue.__html;\r\n            if (lastHtml !== nextHtml) {\r\n                if (!isNullOrUndef(nextHtml)) {\r\n                    dom.innerHTML = nextHtml;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            var ns = isSVG ? namespaces[prop] : false;\r\n            if (ns) {\r\n                dom.setAttributeNS(ns, prop, nextValue);\r\n            }\r\n            else {\r\n                dom.setAttribute(prop, nextValue);\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction patchEvents(lastEvents, nextEvents, dom) {\r\n    lastEvents = lastEvents || EMPTY_OBJ;\r\n    nextEvents = nextEvents || EMPTY_OBJ;\r\n    if (nextEvents !== EMPTY_OBJ) {\r\n        for (var name in nextEvents) {\r\n            // do not add a hasOwnProperty check here, it affects performance\r\n            patchEvent(name, lastEvents[name], nextEvents[name], dom);\r\n        }\r\n    }\r\n    if (lastEvents !== EMPTY_OBJ) {\r\n        for (var name$1 in lastEvents) {\r\n            // do not add a hasOwnProperty check here, it affects performance\r\n            if (isNullOrUndef(nextEvents[name$1])) {\r\n                patchEvent(name$1, lastEvents[name$1], null, dom);\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction patchEvent(name, lastValue, nextValue, dom) {\r\n    if (lastValue !== nextValue) {\r\n        var nameLowerCase = name.toLowerCase();\r\n        var domEvent = dom[nameLowerCase];\r\n        // if the function is wrapped, that means it's been controlled by a wrapper\r\n        if (domEvent && domEvent.wrapped) {\r\n            return;\r\n        }\r\n        if (delegatedProps[name]) {\r\n            handleEvent(name, lastValue, nextValue, dom);\r\n        }\r\n        else {\r\n            if (lastValue !== nextValue) {\r\n                if (!isFunction(nextValue) && !isNullOrUndef(nextValue)) {\r\n                    var linkEvent = nextValue.event;\r\n                    if (linkEvent && isFunction(linkEvent)) {\r\n                        if (!dom._data) {\r\n                            dom[nameLowerCase] = function (e) {\r\n                                linkEvent(e.currentTarget._data, e);\r\n                            };\r\n                        }\r\n                        dom._data = nextValue.data;\r\n                    }\r\n                    else {\r\n                        if (true) {\r\n                            throwError((\"an event on a VNode \\\"\" + name + \"\\\". was not a function or a valid linkEvent.\"));\r\n                        }\r\n                        throwError();\r\n                    }\r\n                }\r\n                else {\r\n                    dom[nameLowerCase] = nextValue;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n// We are assuming here that we come from patchProp routine\r\n// -nextAttrValue cannot be null or undefined\r\nfunction patchStyle(lastAttrValue, nextAttrValue, dom) {\r\n    var domStyle = dom.style;\r\n    if (isString(nextAttrValue)) {\r\n        domStyle.cssText = nextAttrValue;\r\n        return;\r\n    }\r\n    for (var style in nextAttrValue) {\r\n        // do not add a hasOwnProperty check here, it affects performance\r\n        var value = nextAttrValue[style];\r\n        if (isNumber(value) && !(style in isUnitlessNumber)) {\r\n            domStyle[style] = value + 'px';\r\n        }\r\n        else {\r\n            domStyle[style] = value;\r\n        }\r\n    }\r\n    if (!isNullOrUndef(lastAttrValue)) {\r\n        for (var style$1 in lastAttrValue) {\r\n            if (isNullOrUndef(nextAttrValue[style$1])) {\r\n                domStyle[style$1] = '';\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction removeProp(prop, lastValue, dom) {\r\n    if (prop === 'className') {\r\n        dom.removeAttribute('class');\r\n    }\r\n    else if (prop === 'value') {\r\n        dom.value = '';\r\n    }\r\n    else if (prop === 'style') {\r\n        dom.removeAttribute('style');\r\n    }\r\n    else if (isAttrAnEvent(prop)) {\r\n        handleEvent(name, lastValue, null, dom);\r\n    }\r\n    else {\r\n        dom.removeAttribute(prop);\r\n    }\r\n}\n\nfunction mount(vNode, parentDom, lifecycle, context, isSVG) {\r\n    var flags = vNode.flags;\r\n    if (flags & 3970 /* Element */) {\r\n        return mountElement(vNode, parentDom, lifecycle, context, isSVG);\r\n    }\r\n    else if (flags & 28 /* Component */) {\r\n        return mountComponent(vNode, parentDom, lifecycle, context, isSVG, flags & 4 /* ComponentClass */);\r\n    }\r\n    else if (flags & 4096 /* Void */) {\r\n        return mountVoid(vNode, parentDom);\r\n    }\r\n    else if (flags & 1 /* Text */) {\r\n        return mountText(vNode, parentDom);\r\n    }\r\n    else {\r\n        if (true) {\r\n            if (typeof vNode === 'object') {\r\n                throwError((\"mount() received an object that's not a valid VNode, you should stringify it first. Object: \\\"\" + (JSON.stringify(vNode)) + \"\\\".\"));\r\n            }\r\n            else {\r\n                throwError((\"mount() expects a valid VNode, instead it received an object with the type \\\"\" + (typeof vNode) + \"\\\".\"));\r\n            }\r\n        }\r\n        throwError();\r\n    }\r\n}\r\nfunction mountText(vNode, parentDom) {\r\n    var dom = document.createTextNode(vNode.children);\r\n    vNode.dom = dom;\r\n    if (parentDom) {\r\n        appendChild(parentDom, dom);\r\n    }\r\n    return dom;\r\n}\r\nfunction mountVoid(vNode, parentDom) {\r\n    var dom = document.createTextNode('');\r\n    vNode.dom = dom;\r\n    if (parentDom) {\r\n        appendChild(parentDom, dom);\r\n    }\r\n    return dom;\r\n}\r\nfunction mountElement(vNode, parentDom, lifecycle, context, isSVG) {\r\n    if (options.recyclingEnabled) {\r\n        var dom$1 = recycleElement(vNode, lifecycle, context, isSVG);\r\n        if (!isNull(dom$1)) {\r\n            if (!isNull(parentDom)) {\r\n                appendChild(parentDom, dom$1);\r\n            }\r\n            return dom$1;\r\n        }\r\n    }\r\n    var flags = vNode.flags;\r\n    if (isSVG || (flags & 128 /* SvgElement */)) {\r\n        isSVG = true;\r\n    }\r\n    var dom = documentCreateElement(vNode.type, isSVG);\r\n    var children = vNode.children;\r\n    var props = vNode.props;\r\n    var events = vNode.events;\r\n    var ref = vNode.ref;\r\n    vNode.dom = dom;\r\n    if (!isInvalid(children)) {\r\n        if (isStringOrNumber(children)) {\r\n            setTextContent(dom, children);\r\n        }\r\n        else if (isArray(children)) {\r\n            mountArrayChildren(children, dom, lifecycle, context, isSVG);\r\n        }\r\n        else if (isVNode(children)) {\r\n            mount(children, dom, lifecycle, context, isSVG);\r\n        }\r\n    }\r\n    var hasControlledValue = false;\r\n    if (!(flags & 2 /* HtmlElement */)) {\r\n        hasControlledValue = processElement(flags, vNode, dom, true);\r\n    }\r\n    if (!isNull(props)) {\r\n        for (var prop in props) {\r\n            // do not add a hasOwnProperty check here, it affects performance\r\n            patchProp(prop, null, props[prop], dom, isSVG, hasControlledValue);\r\n        }\r\n    }\r\n    if (!isNull(events)) {\r\n        for (var name in events) {\r\n            // do not add a hasOwnProperty check here, it affects performance\r\n            patchEvent(name, null, events[name], dom);\r\n        }\r\n    }\r\n    if (!isNull(ref)) {\r\n        mountRef(dom, ref, lifecycle);\r\n    }\r\n    if (!isNull(parentDom)) {\r\n        appendChild(parentDom, dom);\r\n    }\r\n    return dom;\r\n}\r\nfunction mountArrayChildren(children, dom, lifecycle, context, isSVG) {\r\n    for (var i = 0, len = children.length; i < len; i++) {\r\n        var child = children[i];\r\n        // Verify can string/number be here. might cause de-opt. - Normalization takes care of it.\r\n        if (!isInvalid(child)) {\r\n            if (child.dom) {\r\n                children[i] = child = cloneVNode(child);\r\n            }\r\n            mount(children[i], dom, lifecycle, context, isSVG);\r\n        }\r\n    }\r\n}\r\nfunction mountComponent(vNode, parentDom, lifecycle, context, isSVG, isClass) {\r\n    if (options.recyclingEnabled) {\r\n        var dom$1 = recycleComponent(vNode, lifecycle, context, isSVG);\r\n        if (!isNull(dom$1)) {\r\n            if (!isNull(parentDom)) {\r\n                appendChild(parentDom, dom$1);\r\n            }\r\n            return dom$1;\r\n        }\r\n    }\r\n    var type = vNode.type;\r\n    var props = vNode.props || EMPTY_OBJ;\r\n    var ref = vNode.ref;\r\n    var dom;\r\n    if (isClass) {\r\n        var instance = createClassComponentInstance(vNode, type, props, context, isSVG);\r\n        var input = instance._lastInput;\r\n        instance._vNode = vNode;\r\n        vNode.dom = dom = mount(input, null, lifecycle, instance._childContext, isSVG);\r\n        if (!isNull(parentDom)) {\r\n            appendChild(parentDom, dom);\r\n        }\r\n        mountClassComponentCallbacks(vNode, ref, instance, lifecycle);\r\n        options.findDOMNodeEnabled && componentToDOMNodeMap.set(instance, dom);\r\n        vNode.children = instance;\r\n    }\r\n    else {\r\n        var input$1 = createFunctionalComponentInput(vNode, type, props, context);\r\n        vNode.dom = dom = mount(input$1, null, lifecycle, context, isSVG);\r\n        vNode.children = input$1;\r\n        mountFunctionalComponentCallbacks(ref, dom, lifecycle);\r\n        if (!isNull(parentDom)) {\r\n            appendChild(parentDom, dom);\r\n        }\r\n    }\r\n    return dom;\r\n}\r\nfunction mountClassComponentCallbacks(vNode, ref, instance, lifecycle) {\r\n    if (ref) {\r\n        if (isFunction(ref)) {\r\n            ref(instance);\r\n        }\r\n        else {\r\n            if (true) {\r\n                if (isStringOrNumber(ref)) {\r\n                    throwError('string \"refs\" are not supported in Inferno 1.0. Use callback \"refs\" instead.');\r\n                }\r\n                else if (isObject(ref) && (vNode.flags & 4 /* ComponentClass */)) {\r\n                    throwError('functional component lifecycle events are not supported on ES2015 class components.');\r\n                }\r\n                else {\r\n                    throwError((\"a bad value for \\\"ref\\\" was used on component: \\\"\" + (JSON.stringify(ref)) + \"\\\"\"));\r\n                }\r\n            }\r\n            throwError();\r\n        }\r\n    }\r\n    var cDM = instance.componentDidMount;\r\n    var afterMount = options.afterMount;\r\n    if (!isUndefined(cDM) || !isNull(afterMount)) {\r\n        lifecycle.addListener(function () {\r\n            afterMount && afterMount(vNode);\r\n            cDM && instance.componentDidMount();\r\n            instance._syncSetState = true;\r\n        });\r\n    }\r\n    else {\r\n        instance._syncSetState = true;\r\n    }\r\n}\r\nfunction mountFunctionalComponentCallbacks(ref, dom, lifecycle) {\r\n    if (ref) {\r\n        if (!isNullOrUndef(ref.onComponentWillMount)) {\r\n            ref.onComponentWillMount();\r\n        }\r\n        if (!isNullOrUndef(ref.onComponentDidMount)) {\r\n            lifecycle.addListener(function () { return ref.onComponentDidMount(dom); });\r\n        }\r\n    }\r\n}\r\nfunction mountRef(dom, value, lifecycle) {\r\n    if (isFunction(value)) {\r\n        lifecycle.addListener(function () { return value(dom); });\r\n    }\r\n    else {\r\n        if (isInvalid(value)) {\r\n            return;\r\n        }\r\n        if (true) {\r\n            throwError('string \"refs\" are not supported in Inferno 1.0. Use callback \"refs\" instead.');\r\n        }\r\n        throwError();\r\n    }\r\n}\n\n// We need EMPTY_OBJ defined in one place.\r\n// Its used for comparison so we cant inline it into shared\r\nvar EMPTY_OBJ = {};\r\nif (true) {\r\n    Object.freeze(EMPTY_OBJ);\r\n}\r\nfunction createClassComponentInstance(vNode, Component, props, context, isSVG) {\r\n    if (isUndefined(context)) {\r\n        context = EMPTY_OBJ; // Context should not be mutable\r\n    }\r\n    var instance = new Component(props, context);\r\n    instance.context = context;\r\n    if (instance.props === EMPTY_OBJ) {\r\n        instance.props = props;\r\n    }\r\n    instance._patch = patch;\r\n    if (options.findDOMNodeEnabled) {\r\n        instance._componentToDOMNodeMap = componentToDOMNodeMap;\r\n    }\r\n    instance._unmounted = false;\r\n    instance._pendingSetState = true;\r\n    instance._isSVG = isSVG;\r\n    if (isFunction(instance.componentWillMount)) {\r\n        instance.componentWillMount();\r\n    }\r\n    var childContext = instance.getChildContext();\r\n    if (isNullOrUndef(childContext)) {\r\n        instance._childContext = context;\r\n    }\r\n    else {\r\n        instance._childContext = assign({}, context, childContext);\r\n    }\r\n    options.beforeRender && options.beforeRender(instance);\r\n    var input = instance.render(props, instance.state, context);\r\n    options.afterRender && options.afterRender(instance);\r\n    if (isArray(input)) {\r\n        if (true) {\r\n            throwError('a valid Inferno VNode (or null) must be returned from a component render. You may have returned an array or an invalid object.');\r\n        }\r\n        throwError();\r\n    }\r\n    else if (isInvalid(input)) {\r\n        input = createVoidVNode();\r\n    }\r\n    else if (isStringOrNumber(input)) {\r\n        input = createTextVNode(input, null);\r\n    }\r\n    else {\r\n        if (input.dom) {\r\n            input = cloneVNode(input);\r\n        }\r\n        if (input.flags & 28 /* Component */) {\r\n            // if we have an input that is also a component, we run into a tricky situation\r\n            // where the root vNode needs to always have the correct DOM entry\r\n            // so we break monomorphism on our input and supply it our vNode as parentVNode\r\n            // we can optimise this in the future, but this gets us out of a lot of issues\r\n            input.parentVNode = vNode;\r\n        }\r\n    }\r\n    instance._pendingSetState = false;\r\n    instance._lastInput = input;\r\n    return instance;\r\n}\r\nfunction replaceLastChildAndUnmount(lastInput, nextInput, parentDom, lifecycle, context, isSVG, isRecycling) {\r\n    replaceVNode(parentDom, mount(nextInput, null, lifecycle, context, isSVG), lastInput, lifecycle, isRecycling);\r\n}\r\nfunction replaceVNode(parentDom, dom, vNode, lifecycle, isRecycling) {\r\n    unmount(vNode, null, lifecycle, false, isRecycling);\r\n    // we cannot cache nodeType here as vNode might be re-assigned below\r\n    if (vNode.flags & 28 /* Component */) {\r\n        // if we are accessing a stateful or stateless component, we want to access their last rendered input\r\n        // accessing their DOM node is not useful to us here\r\n        vNode = vNode.children._lastInput || vNode.children;\r\n    }\r\n    replaceChild(parentDom, dom, vNode.dom);\r\n}\r\nfunction createFunctionalComponentInput(vNode, component, props, context) {\r\n    var input = component(props, context);\r\n    if (isArray(input)) {\r\n        if (true) {\r\n            throwError('a valid Inferno VNode (or null) must be returned from a component render. You may have returned an array or an invalid object.');\r\n        }\r\n        throwError();\r\n    }\r\n    else if (isInvalid(input)) {\r\n        input = createVoidVNode();\r\n    }\r\n    else if (isStringOrNumber(input)) {\r\n        input = createTextVNode(input, null);\r\n    }\r\n    else {\r\n        if (input.dom) {\r\n            input = cloneVNode(input);\r\n        }\r\n        if (input.flags & 28 /* Component */) {\r\n            // if we have an input that is also a component, we run into a tricky situation\r\n            // where the root vNode needs to always have the correct DOM entry\r\n            // so we break monomorphism on our input and supply it our vNode as parentVNode\r\n            // we can optimise this in the future, but this gets us out of a lot of issues\r\n            input.parentVNode = vNode;\r\n        }\r\n    }\r\n    return input;\r\n}\r\nfunction setTextContent(dom, text) {\r\n    if (text !== '') {\r\n        dom.textContent = text;\r\n    }\r\n    else {\r\n        dom.appendChild(document.createTextNode(''));\r\n    }\r\n}\r\nfunction updateTextContent(dom, text) {\r\n    dom.firstChild.nodeValue = text;\r\n}\r\nfunction appendChild(parentDom, dom) {\r\n    parentDom.appendChild(dom);\r\n}\r\nfunction insertOrAppend(parentDom, newNode, nextNode) {\r\n    if (isNullOrUndef(nextNode)) {\r\n        appendChild(parentDom, newNode);\r\n    }\r\n    else {\r\n        parentDom.insertBefore(newNode, nextNode);\r\n    }\r\n}\r\nfunction documentCreateElement(tag, isSVG) {\r\n    if (isSVG === true) {\r\n        return document.createElementNS(svgNS, tag);\r\n    }\r\n    else {\r\n        return document.createElement(tag);\r\n    }\r\n}\r\nfunction replaceWithNewNode(lastNode, nextNode, parentDom, lifecycle, context, isSVG, isRecycling) {\r\n    unmount(lastNode, null, lifecycle, false, isRecycling);\r\n    var dom = mount(nextNode, null, lifecycle, context, isSVG);\r\n    nextNode.dom = dom;\r\n    replaceChild(parentDom, dom, lastNode.dom);\r\n}\r\nfunction replaceChild(parentDom, nextDom, lastDom) {\r\n    if (!parentDom) {\r\n        parentDom = lastDom.parentNode;\r\n    }\r\n    parentDom.replaceChild(nextDom, lastDom);\r\n}\r\nfunction removeChild(parentDom, dom) {\r\n    parentDom.removeChild(dom);\r\n}\r\nfunction removeAllChildren(dom, children, lifecycle, isRecycling) {\r\n    dom.textContent = '';\r\n    if (!options.recyclingEnabled || (options.recyclingEnabled && !isRecycling)) {\r\n        removeChildren(null, children, lifecycle, isRecycling);\r\n    }\r\n}\r\nfunction removeChildren(dom, children, lifecycle, isRecycling) {\r\n    for (var i = 0, len = children.length; i < len; i++) {\r\n        var child = children[i];\r\n        if (!isInvalid(child)) {\r\n            unmount(child, dom, lifecycle, true, isRecycling);\r\n        }\r\n    }\r\n}\r\nfunction isKeyed(lastChildren, nextChildren) {\r\n    return nextChildren.length && !isNullOrUndef(nextChildren[0]) && !isNullOrUndef(nextChildren[0].key)\r\n        && lastChildren.length && !isNullOrUndef(lastChildren[0]) && !isNullOrUndef(lastChildren[0].key);\r\n}\n\nfunction createVNode(flags, type, props, children, events, key, ref, noNormalise) {\r\n    if (flags & 16 /* ComponentUnknown */) {\r\n        flags = isStatefulComponent(type) ? 4 /* ComponentClass */ : 8 /* ComponentFunction */;\r\n    }\r\n    var vNode = {\r\n        children: isUndefined(children) ? null : children,\r\n        dom: null,\r\n        events: events || null,\r\n        flags: flags,\r\n        key: isUndefined(key) ? null : key,\r\n        props: props || null,\r\n        ref: ref || null,\r\n        type: type\r\n    };\r\n    if (!noNormalise) {\r\n        normalize(vNode);\r\n    }\r\n    if (options.createVNode) {\r\n        options.createVNode(vNode);\r\n    }\r\n    return vNode;\r\n}\r\nfunction cloneVNode(vNodeToClone, props) {\n    var arguments$1 = arguments;\n\r\n    var restParamLength = arguments.length - 2; // children\r\n    var children;\r\n    // Manually handle restParam for children, because babel always creates array\r\n    // Not creating array allows us to fastPath out of recursion\r\n    if (restParamLength > 0) {\r\n        if (!props) {\r\n            props = {};\r\n        }\r\n        if (restParamLength === 1) {\r\n            children = arguments[2];\r\n        }\r\n        else {\r\n            children = [];\r\n            while (restParamLength-- > 0) {\r\n                children[restParamLength] = arguments$1[restParamLength + 2];\r\n            }\r\n        }\r\n        if (isUndefined(props.children)) {\r\n            props.children = children;\r\n        }\r\n        else {\r\n            if (isArray(children)) {\r\n                if (isArray(props.children)) {\r\n                    props.children = props.children.concat(children);\r\n                }\r\n                else {\r\n                    props.children = [props.children].concat(children);\r\n                }\r\n            }\r\n            else {\r\n                if (isArray(props.children)) {\r\n                    props.children.push(children);\r\n                }\r\n                else {\r\n                    props.children = [props.children];\r\n                    props.children.push(children);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    var newVNode;\r\n    if (isArray(vNodeToClone)) {\r\n        var tmpArray = [];\r\n        for (var i = 0, len = vNodeToClone.length; i < len; i++) {\r\n            tmpArray.push(cloneVNode(vNodeToClone[i]));\r\n        }\r\n        newVNode = tmpArray;\r\n    }\r\n    else {\r\n        var flags = vNodeToClone.flags;\r\n        var events = vNodeToClone.events || (props && props.events) || null;\r\n        var key = !isNullOrUndef(vNodeToClone.key) ? vNodeToClone.key : (props ? props.key : null);\r\n        var ref = vNodeToClone.ref || (props ? props.ref : null);\r\n        if (flags & 28 /* Component */) {\r\n            newVNode = createVNode(flags, vNodeToClone.type, (!vNodeToClone.props && !props) ? EMPTY_OBJ : assign({}, vNodeToClone.props, props), null, events, key, ref, true);\r\n            var newProps = newVNode.props;\r\n            if (newProps) {\r\n                var newChildren = newProps.children;\r\n                // we need to also clone component children that are in props\r\n                // as the children may also have been hoisted\r\n                if (newChildren) {\r\n                    if (isArray(newChildren)) {\r\n                        var len$1 = newChildren.length;\r\n                        if (len$1 > 0) {\r\n                            var tmpArray$1 = [];\r\n                            for (var i$1 = 0; i$1 < len$1; i$1++) {\r\n                                var child = newChildren[i$1];\r\n                                if (!isInvalid(child) && isVNode(child)) {\r\n                                    tmpArray$1.push(cloneVNode(child));\r\n                                }\r\n                            }\r\n                            newProps.children = tmpArray$1;\r\n                        }\r\n                    }\r\n                    else if (isVNode(newChildren)) {\r\n                        newProps.children = cloneVNode(newChildren);\r\n                    }\r\n                }\r\n            }\r\n            newVNode.children = null;\r\n        }\r\n        else if (flags & 3970 /* Element */) {\r\n            children = (props && props.children) || vNodeToClone.children;\r\n            newVNode = createVNode(flags, vNodeToClone.type, (!vNodeToClone.props && !props) ? EMPTY_OBJ : assign({}, vNodeToClone.props, props), children, events, key, ref, !children);\r\n        }\r\n        else if (flags & 1 /* Text */) {\r\n            newVNode = createTextVNode(vNodeToClone.children, key);\r\n        }\r\n    }\r\n    return newVNode;\r\n}\r\nfunction createVoidVNode() {\r\n    return createVNode(4096 /* Void */);\r\n}\r\nfunction createTextVNode(text, key) {\r\n    return createVNode(1 /* Text */, null, null, text, null, key);\r\n}\r\nfunction isVNode(o) {\r\n    return !!o.flags;\r\n}\n\nfunction linkEvent(data, event) {\r\n    return { data: data, event: event };\r\n}\n\nif (true) {\r\n    var testFunc = function testFn() { };\r\n    if ((testFunc.name || testFunc.toString()).indexOf('testFn') === -1) {\r\n        warning(('It looks like you\\'re using a minified copy of the development build ' +\r\n            'of Inferno. When deploying Inferno apps to production, make sure to use ' +\r\n            'the production build which skips development warnings and is faster. ' +\r\n            'See http://infernojs.org for more details.'));\r\n    }\r\n}\r\n// This will be replaced by rollup\r\nvar version = '1.3.0-rc.10';\r\n// we duplicate it so it plays nicely with different module loading systems\r\nvar index = {\r\n    linkEvent: linkEvent,\r\n    // core shapes\r\n    createVNode: createVNode,\r\n    // cloning\r\n    cloneVNode: cloneVNode,\r\n    // used to shared common items between Inferno libs\r\n    NO_OP: NO_OP,\r\n    EMPTY_OBJ: EMPTY_OBJ,\r\n    // DOM\r\n    render: render,\r\n    findDOMNode: findDOMNode,\r\n    createRenderer: createRenderer,\r\n    options: options,\r\n    version: version\r\n};\n\nexports.version = version;\nexports['default'] = index;\nexports.linkEvent = linkEvent;\nexports.createVNode = createVNode;\nexports.cloneVNode = cloneVNode;\nexports.NO_OP = NO_OP;\nexports.EMPTY_OBJ = EMPTY_OBJ;\nexports.render = render;\nexports.findDOMNode = findDOMNode;\nexports.createRenderer = createRenderer;\nexports.options = options;\nexports.internal_isUnitlessNumber = isUnitlessNumber;\nexports.internal_normalize = normalize;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 1 */
/* unknown exports provided */
/* all exports used */
/*!************************************************************!*\
  !*** ./~/inferno-component/dist/inferno-component.node.js ***!
  \************************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("\n/*!\n * inferno-component v1.3.0-rc.10\n * (c) 2017 Dominic Gannaway'\n * Released under the MIT License.\n */\n\n(function (global, factory) {\n\t true ? module.exports = factory(__webpack_require__(/*! inferno */ 0)) :\n\ttypeof define === 'function' && define.amd ? define(['inferno'], factory) :\n\t(global['inferno-component'] = factory(global.Inferno));\n}(this, (function (inferno) { 'use strict';\n\nvar NO_OP = '$NO_OP';\r\nvar ERROR_MSG = 'a runtime error occured! Use Inferno in development environment to find the error.';\r\nvar isBrowser = typeof window !== 'undefined' && window.document;\r\n\r\n// this is MUCH faster than .constructor === Array and instanceof Array\r\n// in Node 7 and the later versions of V8, slower in older versions though\r\nvar isArray = Array.isArray;\r\n\r\nfunction isStringOrNumber(obj) {\r\n    var type = typeof obj;\r\n    return type === 'string' || type === 'number';\r\n}\r\nfunction isNullOrUndef(obj) {\r\n    return isUndefined(obj) || isNull(obj);\r\n}\r\nfunction isInvalid(obj) {\r\n    return isNull(obj) || obj === false || isTrue(obj) || isUndefined(obj);\r\n}\r\nfunction isFunction(obj) {\r\n    return typeof obj === 'function';\r\n}\r\n\r\n\r\n\r\nfunction isNull(obj) {\r\n    return obj === null;\r\n}\r\nfunction isTrue(obj) {\r\n    return obj === true;\r\n}\r\nfunction isUndefined(obj) {\r\n    return obj === undefined;\r\n}\r\n\r\nfunction throwError(message) {\r\n    if (!message) {\r\n        message = ERROR_MSG;\r\n    }\r\n    throw new Error((\"Inferno Error: \" + message));\r\n}\r\n\r\nfunction assign(target) {\n    var arguments$1 = arguments;\n\r\n    for (var i = 1, argumentsLength = arguments.length; i < argumentsLength; i++) {\r\n        var obj = arguments$1[i];\r\n        if (!isNullOrUndef(obj)) {\r\n            var keys = Object.keys(obj);\r\n            for (var j = 0, keysLength = keys.length; j < keysLength; j++) {\r\n                var key = keys[j];\r\n                target[key] = obj[key];\r\n            }\r\n        }\r\n    }\r\n    return target;\r\n}\r\nfunction Lifecycle() {\r\n    this.listeners = [];\r\n}\r\nLifecycle.prototype.addListener = function addListener(callback) {\r\n    this.listeners.push(callback);\r\n};\r\nLifecycle.prototype.trigger = function trigger() {\r\n    var listeners = this.listeners;\r\n    for (var i = 0, len = listeners.length; i < len; i++) {\r\n        listeners[i]();\r\n    }\r\n};\n\n// Make sure u use EMPTY_OBJ from 'inferno', otherwise it'll be a different reference\r\nvar noOp = ERROR_MSG;\r\nif (true) {\r\n    noOp = 'Inferno Error: Can only update a mounted or mounting component. This usually means you called setState() or forceUpdate() on an unmounted component. This is a no-op.';\r\n}\r\nvar componentCallbackQueue = new Map();\r\n// when a components root VNode is also a component, we can run into issues\r\n// this will recursively look for vNode.parentNode if the VNode is a component\r\nfunction updateParentComponentVNodes(vNode, dom) {\r\n    if (vNode.flags & 28 /* Component */) {\r\n        var parentVNode = vNode.parentVNode;\r\n        if (parentVNode) {\r\n            parentVNode.dom = dom;\r\n            updateParentComponentVNodes(parentVNode, dom);\r\n        }\r\n    }\r\n}\r\nfunction addToQueue(component, force, callback) {\r\n    // TODO this function needs to be revised and improved on\r\n    var queue = componentCallbackQueue.get(component);\r\n    if (!queue) {\r\n        queue = [];\r\n        componentCallbackQueue.set(component, queue);\r\n        Promise.resolve().then(function () {\r\n            componentCallbackQueue.delete(component);\r\n            applyState(component, force, function () {\r\n                for (var i = 0, len = queue.length; i < len; i++) {\r\n                    queue[i]();\r\n                }\r\n            });\r\n        });\r\n    }\r\n    if (callback) {\r\n        queue.push(callback);\r\n    }\r\n}\r\nfunction queueStateChanges(component, newState, callback, sync) {\r\n    if (isFunction(newState)) {\r\n        newState = newState(component.state, component.props, component.context);\r\n    }\r\n    for (var stateKey in newState) {\r\n        component._pendingState[stateKey] = newState[stateKey];\r\n    }\r\n    if (!component._pendingSetState && isBrowser && !(sync && component._blockRender)) {\r\n        if (sync || component._blockRender) {\r\n            component._pendingSetState = true;\r\n            applyState(component, false, callback);\r\n        }\r\n        else {\r\n            addToQueue(component, false, callback);\r\n        }\r\n    }\r\n    else {\r\n        assign(component.state, component._pendingState);\r\n        component._pendingState = {};\r\n    }\r\n}\r\nfunction applyState(component, force, callback) {\r\n    if ((!component._deferSetState || force) && !component._blockRender && !component._unmounted) {\r\n        component._pendingSetState = false;\r\n        var pendingState = component._pendingState;\r\n        var prevState = component.state;\r\n        var nextState = assign({}, prevState, pendingState);\r\n        var props = component.props;\r\n        var context = component.context;\r\n        component._pendingState = {};\r\n        var nextInput = component._updateComponent(prevState, nextState, props, props, context, force, true);\r\n        var didUpdate = true;\r\n        if (isInvalid(nextInput)) {\r\n            nextInput = inferno.createVNode(4096 /* Void */);\r\n        }\r\n        else if (nextInput === NO_OP) {\r\n            nextInput = component._lastInput;\r\n            didUpdate = false;\r\n        }\r\n        else if (isStringOrNumber(nextInput)) {\r\n            nextInput = inferno.createVNode(1 /* Text */, null, null, nextInput);\r\n        }\r\n        else if (isArray(nextInput)) {\r\n            if (true) {\r\n                throwError('a valid Inferno VNode (or null) must be returned from a component render. You may have returned an array or an invalid object.');\r\n            }\r\n            throwError();\r\n        }\r\n        var lastInput = component._lastInput;\r\n        var vNode = component._vNode;\r\n        var parentDom = (lastInput.dom && lastInput.dom.parentNode) || (lastInput.dom = vNode.dom);\r\n        component._lastInput = nextInput;\r\n        if (didUpdate) {\r\n            var subLifecycle = component._lifecycle;\r\n            if (!subLifecycle) {\r\n                subLifecycle = new Lifecycle();\r\n            }\r\n            else {\r\n                subLifecycle.listeners = [];\r\n            }\r\n            component._lifecycle = subLifecycle;\r\n            var childContext = component.getChildContext();\r\n            if (isNullOrUndef(childContext)) {\r\n                childContext = component._childContext;\r\n            }\r\n            else {\r\n                childContext = assign({}, context, component._childContext, childContext);\r\n            }\r\n            component._patch(lastInput, nextInput, parentDom, subLifecycle, childContext, component._isSVG, false);\r\n            subLifecycle.trigger();\r\n            component.componentDidUpdate(props, prevState);\r\n            inferno.options.afterUpdate && inferno.options.afterUpdate(vNode);\r\n        }\r\n        var dom = vNode.dom = nextInput.dom;\r\n        var componentToDOMNodeMap = component._componentToDOMNodeMap;\r\n        componentToDOMNodeMap && componentToDOMNodeMap.set(component, nextInput.dom);\r\n        updateParentComponentVNodes(vNode, dom);\r\n        if (!isNullOrUndef(callback)) {\r\n            callback();\r\n        }\r\n    }\r\n    else if (!isNullOrUndef(callback)) {\r\n        if (component._blockRender) {\r\n            component.state = component._pendingState;\r\n            component._pendingState = {};\r\n        }\r\n        callback();\r\n    }\r\n}\r\nvar Component = function Component(props, context) {\r\n    this.state = {};\r\n    this._blockRender = false;\r\n    this._ignoreSetState = false;\r\n    this._blockSetState = false;\r\n    this._deferSetState = false;\r\n    this._pendingSetState = false;\r\n    this._syncSetState = true;\r\n    this._pendingState = {};\r\n    this._lastInput = null;\r\n    this._vNode = null;\r\n    this._unmounted = true;\r\n    this._lifecycle = null;\r\n    this._childContext = null;\r\n    this._patch = null;\r\n    this._isSVG = false;\r\n    this._componentToDOMNodeMap = null;\r\n    /** @type {object} */\r\n    this.props = props || inferno.EMPTY_OBJ;\r\n    /** @type {object} */\r\n    this.context = context || inferno.EMPTY_OBJ; // context should not be mutable\r\n};\r\nComponent.prototype.render = function render (nextProps, nextState, nextContext) {\r\n};\r\nComponent.prototype.forceUpdate = function forceUpdate (callback) {\r\n    if (this._unmounted) {\r\n        return;\r\n    }\r\n    isBrowser && applyState(this, true, callback);\r\n};\r\nComponent.prototype.setState = function setState (newState, callback) {\r\n    if (this._unmounted) {\r\n        return;\r\n    }\r\n    if (!this._blockSetState) {\r\n        if (!this._ignoreSetState) {\r\n            queueStateChanges(this, newState, callback, this._syncSetState);\r\n        }\r\n    }\r\n    else {\r\n        if (true) {\r\n            throwError('cannot update state via setState() in componentWillUpdate().');\r\n        }\r\n        throwError();\r\n    }\r\n};\r\nComponent.prototype.setStateSync = function setStateSync (newState) {\r\n    if (this._unmounted) {\r\n        return;\r\n    }\r\n    if (!this._blockSetState) {\r\n        if (!this._ignoreSetState) {\r\n            queueStateChanges(this, newState, null, true);\r\n        }\r\n    }\r\n    else {\r\n        if (true) {\r\n            throwError('cannot update state via setState() in componentWillUpdate().');\r\n        }\r\n        throwError();\r\n    }\r\n};\r\nComponent.prototype.componentWillMount = function componentWillMount () {\r\n};\r\nComponent.prototype.componentDidUpdate = function componentDidUpdate (prevProps, prevState, prevContext) {\r\n};\r\nComponent.prototype.shouldComponentUpdate = function shouldComponentUpdate (nextProps, nextState, context) {\r\n    return true;\r\n};\r\nComponent.prototype.componentWillReceiveProps = function componentWillReceiveProps (nextProps, context) {\r\n};\r\nComponent.prototype.componentWillUpdate = function componentWillUpdate (nextProps, nextState, nextContext) {\r\n};\r\nComponent.prototype.getChildContext = function getChildContext () {\r\n};\r\nComponent.prototype._updateComponent = function _updateComponent (prevState, nextState, prevProps, nextProps, context, force, fromSetState) {\r\n    if (this._unmounted === true) {\r\n        if (true) {\r\n            throwError(noOp);\r\n        }\r\n        throwError();\r\n    }\r\n    if ((prevProps !== nextProps || nextProps === inferno.EMPTY_OBJ) || prevState !== nextState || force) {\r\n        if (prevProps !== nextProps || nextProps === inferno.EMPTY_OBJ) {\r\n            if (!fromSetState) {\r\n                this._blockRender = true;\r\n                this.componentWillReceiveProps(nextProps, context);\r\n                this._blockRender = false;\r\n            }\r\n            if (this._pendingSetState) {\r\n                nextState = assign({}, nextState, this._pendingState);\r\n                this._pendingSetState = false;\r\n                this._pendingState = {};\r\n            }\r\n        }\r\n        var shouldUpdate = this.shouldComponentUpdate(nextProps, nextState, context);\r\n        if (shouldUpdate || force) {\r\n            this._blockSetState = true;\r\n            this.componentWillUpdate(nextProps, nextState, context);\r\n            this._blockSetState = false;\r\n            this.props = nextProps;\r\n            this.state = nextState;\r\n            this.context = context;\r\n            inferno.options.beforeRender && inferno.options.beforeRender(this);\r\n            var render = this.render(nextProps, nextState, context);\r\n            inferno.options.afterRender && inferno.options.afterRender(this);\r\n            return render;\r\n        }\r\n        else {\r\n            this.props = nextProps;\r\n            this.state = nextState;\r\n            this.context = context;\r\n        }\r\n    }\r\n    return NO_OP;\r\n};\n\nreturn Component;\n\n})));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 2 */
/* unknown exports provided */
/* all exports used */
/*!************************!*\
  !*** ./src/ts/App.tsx ***!
  \************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar inferno_1 = __webpack_require__(/*! inferno */ 0);\nvar inferno_component_1 = __webpack_require__(/*! inferno-component */ 1);\nvar createVNode = Inferno.createVNode;\n\nvar MyComponent = function (_inferno_component_1$) {\n    _inherits(MyComponent, _inferno_component_1$);\n\n    function MyComponent(props) {\n        _classCallCheck(this, MyComponent);\n\n        var _this = _possibleConstructorReturn(this, (MyComponent.__proto__ || Object.getPrototypeOf(MyComponent)).call(this, props));\n\n        _this.state = {\n            counter: 0\n        };\n        return _this;\n    }\n\n    _createClass(MyComponent, [{\n        key: \"render\",\n        value: function render() {\n            return createVNode(2, \"div\", null, [createVNode(2, \"h1\", null, \"Header!\"), createVNode(2, \"span\", null, [\"Counter is at: \", this.state.counter])]);\n        }\n    }]);\n\n    return MyComponent;\n}(inferno_component_1.default);\n\nvar app = document.getElementById(\"app\");\ninferno_1.default.render(createVNode(16, MyComponent), app);//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy90cy9BcHAudHN4P2JhOWEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEluZmVybm8gZnJvbSAnaW5mZXJubyc7XG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJ2luZmVybm8tY29tcG9uZW50JztcblxuY2xhc3MgTXlDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQ8YW55ICwgYW55PiB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgY291bnRlcjogMFxuICAgICAgICB9XG4gICAgfVxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxoMT5IZWFkZXIhPC9oMT5cbiAgICAgICAgPHNwYW4+Q291bnRlciBpcyBhdDogeyB0aGlzLnN0YXRlLmNvdW50ZXIgfTwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgKVxuICAgIH1cbn1cblxuY29uc3QgYXBwIDphbnkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImFwcFwiKTtcbkluZmVybm8ucmVuZGVyKDxNeUNvbXBvbmVudCAvPiAsIGFwcCk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3RzL0FwcC50c3giXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTs7O0FBRUE7OztBQUNBO0FBQ0E7QUFDQTtBQURBO0FBQ0E7QUFBQTtBQUNBO0FBREE7O0FBR0E7QUFDQTs7OztBQUNBO0FBTUE7Ozs7QUFkQTtBQUNBO0FBZ0JBOyIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ })
/******/ ]);